{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/instapaper/source/robots.txt","path":"robots.txt","modified":1,"renderable":1},{"_id":"themes/instapaper/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/instapaper/source/scripts/post.js","path":"scripts/post.js","modified":1,"renderable":1},{"_id":"themes/instapaper/source/scripts/dark.js","path":"scripts/dark.js","modified":1,"renderable":1},{"_id":"themes/instapaper/source/style/index.css","path":"style/index.css","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/gitalk.js","path":"js/gitalk.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/iconfont.js","path":"js/iconfont.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/titleTip.js","path":"js/titleTip.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","path":"img/article-list-background.jpeg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/brown-papersq.png","path":"img/brown-papersq.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/gov.png","path":"img/gov.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/weixin.jpg","path":"img/weixin.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/school-book.png","path":"img/school-book.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/mobile.styl","path":"css/mobile.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","path":"css/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","path":"css/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","path":"css/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","path":"css/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","path":"css/fonts/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/selection.json","path":"css/fonts/selection.json","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","path":"css/hl_theme/atom-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","path":"css/hl_theme/atom-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","path":"css/hl_theme/brown-paper.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","path":"css/hl_theme/darcula.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","path":"css/hl_theme/github-gist.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","path":"css/hl_theme/github.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","path":"css/hl_theme/kimbie-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","path":"css/hl_theme/gruvbox-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","path":"css/hl_theme/gruvbox-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","path":"css/hl_theme/kimbie-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","path":"css/hl_theme/railscasts.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","path":"css/hl_theme/rainbow.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","path":"css/hl_theme/zenbum.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","path":"css/hl_theme/school-book.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","path":"css/hl_theme/sublime.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","path":"css/hl_theme/sunburst.styl","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1708261896281},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1708261946865},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1708261939442},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1708261946865},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1708261946875},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1708261946875},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1708261946877},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1708261946876},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1708261946877},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1708261946878},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1708261946878},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1708261946879},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1708261946879},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1708261946879},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1708261946880},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1708261946880},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1708261946881},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1708261946881},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1708261946881},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1708261946882},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1708261946882},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1708261946882},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1708261946883},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1708261946884},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1708261946883},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1708261946884},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1708261946885},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1708261946886},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1708261946886},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1708261946886},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1708261946887},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1708261946887},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1708261946887},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1708261946887},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1708261946888},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1708261946888},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1708261945443},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1708261946888},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1708261939449},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1708261939453},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1708261939447},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1708261939454},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1708261939455},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1708261939456},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1708261939458},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1708261946866},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1708261946866},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1708261946875},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1708261939444},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1708261939444},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1708261946864},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1708261939445},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1708261939450},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1708261939451},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1708261939451},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1708261939445},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1708261939447},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1708261939456},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1708261939454},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1708261939446},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1708261939451},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1708261939449},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1708261939456},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1708261939453},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1708261939458},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1708261939458},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1708261946869},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1708261946867},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1708261946870},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1708261946873},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1708261946871},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1708261946873},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1708261946868},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1708261946873},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1708261946874},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1708261946871},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1708261939450},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1708261946871},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1708261946871},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1708261939448},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1708261939450},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1708261939459},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1708261939457},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1708261939455},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1708261946862},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1708261946191},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1708261945442},{"_id":"source/_posts/My-New-Post.md","hash":"2db610bdbb7dbf7429ec73180e95017320d706b0","modified":1710916689615},{"_id":"themes/instapaper/.commitlint.config.cjs","hash":"035035f291ee44a37fe593480c8c20bd56772f32","modified":1708315116002},{"_id":"themes/instapaper/.eslintrc.yml","hash":"61ea197e2011f04de28573816a584bb1acd97a5b","modified":1708315116003},{"_id":"themes/instapaper/.gitignore","hash":"075b20da2bb3dfa7932394363d63d98cbb0b7042","modified":1708315116003},{"_id":"themes/instapaper/.nvmrc","hash":"1f44dfaa39e5262af3f27dafee51f5e223a42554","modified":1708315116005},{"_id":"themes/instapaper/.eslintignore","hash":"0c79baf79ac251ea4efdb634fc9e0fb31bc153f2","modified":1708315116003},{"_id":"themes/instapaper/CHANGELOG.md","hash":"f4692e573be5bcb4c375c383c78bb5d5f9a1ed41","modified":1708315116006},{"_id":"themes/instapaper/README.md","hash":"9838a964abdfc216e60fdcebedf308ef034b8f38","modified":1708315116006},{"_id":"themes/instapaper/package.json","hash":"e6eb7e660e44ff9655ee730b86b857152a6552a6","modified":1708315116014},{"_id":"themes/instapaper/_config.yaml.sample","hash":"873702f7151a6dc769c9e3ba3d2b4263acf77d49","modified":1708315116007},{"_id":"themes/instapaper/commitlint.config.cjs","hash":"035035f291ee44a37fe593480c8c20bd56772f32","modified":1708315116008},{"_id":"themes/instapaper/_config.yaml","hash":"2096bdd773d5b1985b1774febd0573b0da012b4a","modified":1708315298455},{"_id":"themes/instapaper/prettier.config.cjs","hash":"9844bfee187daf00e6fca1de08d9768fb5798e4c","modified":1708315116014},{"_id":"themes/instapaper/tsconfig.json","hash":"13dfd678beebd3cbe2f7857509789c7af2f1143e","modified":1708315116023},{"_id":"themes/instapaper/LICENSE","hash":"3bf4dd12aa78a4a58a79d5024ed1073308733204","modified":1708315116006},{"_id":"themes/instapaper/.husky/commit-msg","hash":"b9cb2a3ff8cf5c1d2458202dfaccb4cf71739949","modified":1708315116004},{"_id":"themes/instapaper/.husky/pre-push","hash":"023b629d2be07c7eb9194b66567f92ec336badf8","modified":1708315116005},{"_id":"themes/instapaper/.husky/pre-commit","hash":"023b629d2be07c7eb9194b66567f92ec336badf8","modified":1708315116004},{"_id":"themes/instapaper/.vscode/settings.json","hash":"062958d795b6ba7863c48483254dc50ad8becb6c","modified":1708315116005},{"_id":"themes/instapaper/build/esbuild.js","hash":"9c2c676befbb0d6cb3ab25a2da892a68943d9853","modified":1708315116008},{"_id":"themes/instapaper/source/robots.txt","hash":"4c65d153f7c68c3f9f6850a62def0597826dd906","modified":1708315116015},{"_id":"themes/instapaper/build/release.js","hash":"64369849223fd429f1f77d3d7e3dd4d4e18bed36","modified":1708315116008},{"_id":"themes/instapaper/layout/archive.pug","hash":"4494b6910038fc0c3d90e47087aacbc1ad20e25d","modified":1708315116009},{"_id":"themes/instapaper/layout/index.pug","hash":"ea319eeb4608789f90481bd61b0636dc690652d1","modified":1708315116009},{"_id":"themes/instapaper/layout/layout.pug","hash":"1615d71016f8e2bd61dc355dbbd6ab75fbc60d68","modified":1708315116010},{"_id":"themes/instapaper/layout/tag.pug","hash":"c500c67b9fbb12216af412c2f9f83417c8f62d72","modified":1708315116013},{"_id":"themes/instapaper/source/scripts/post.js","hash":"92a2b1a92f6ee0ee04c079be7d662be95d22ae92","modified":1708315116016},{"_id":"themes/instapaper/layout/partial/comment.pug","hash":"04dad174b3437abbbfbe906132ef51d43d9986ed","modified":1708315116010},{"_id":"themes/instapaper/layout/post.pug","hash":"796ff8dd0e55cfffe49769b8c2933cf23f1fac88","modified":1708315116013},{"_id":"themes/instapaper/layout/partial/copyright.pug","hash":"88c08d93acf11955540e14c09d3b1d931ee4b11f","modified":1708315116011},{"_id":"themes/instapaper/layout/partial/footer.pug","hash":"39929afbdbddf0011e7474ae7be25e20a49d45e1","modified":1708315116011},{"_id":"themes/instapaper/source/scripts/dark.js","hash":"d2cbde8fd7ce82351c4ed894e31c41f517a7d653","modified":1708315116016},{"_id":"themes/instapaper/source/images/favicon.ico","hash":"1be8c566a88290e0b852729adb24fceb20dc9ad9","modified":1708315116015},{"_id":"themes/instapaper/layout/partial/article-list.pug","hash":"0a5aba5d8ad114a4558f010491659d60a7dfe8b8","modified":1708315116010},{"_id":"themes/instapaper/layout/partial/header-base.pug","hash":"7a15fd94157aeb51e831ae251bb1415f000ebf0f","modified":1708315116012},{"_id":"themes/instapaper/src/scripts/dark.ts","hash":"d071f38b7e2efd8729d8c96969907fc07e362792","modified":1708315116017},{"_id":"themes/instapaper/layout/partial/header.pug","hash":"d5e8ead22737b6792bd4ad023bfcacd4187b9c09","modified":1708315116012},{"_id":"themes/instapaper/layout/partial/home-pager.pug","hash":"96eb84ff3622868efea9b273410adf134c53d2fc","modified":1708315116013},{"_id":"themes/instapaper/src/style/archive.scss","hash":"589995c4f39088e23ac8c9f4dfcd77b253c33a37","modified":1708315116018},{"_id":"themes/instapaper/src/scripts/post.ts","hash":"90823213148d153a12dfdc5f7d7189aac9e14fb4","modified":1708315116018},{"_id":"themes/instapaper/src/style/index.scss","hash":"e66a5cd04adfc2c7d7948dcb636838104224ab39","modified":1708315116019},{"_id":"themes/instapaper/src/style/home.scss","hash":"aebbb64c17a60fc61d1bf9769a76e5ec44e5e7fa","modified":1708315116019},{"_id":"themes/instapaper/src/style/mobile.scss","hash":"280c282462dea0661bd3e64eabe1139b90b89f46","modified":1708315116019},{"_id":"themes/instapaper/source/style/index.css","hash":"3f41c04a2c8f910ffd0f604de471f2dee0aa09dc","modified":1708315116017},{"_id":"themes/instapaper/src/style/partial/footer.scss","hash":"c376d5c09b2672465c90660c278f24b92fda6e85","modified":1708315116020},{"_id":"themes/instapaper/src/style/partial/_variables.scss","hash":"cee22e22cace5c322e61ab87b3d76c31aff4f414","modified":1708315116020},{"_id":"themes/instapaper/src/style/post.scss","hash":"0167865e0fef7043592b5a617bd3d2ef1a79f59e","modified":1708315116023},{"_id":"themes/instapaper/src/style/partial/gitalk.scss","hash":"b20420cdd603038553e0e591b899e91ab8e689fe","modified":1708315116021},{"_id":"themes/instapaper/src/style/partial/header.scss","hash":"ecf01f16f6df760ef9f9e0f39b2b2d15d819f3e8","modified":1708315116021},{"_id":"themes/instapaper/src/style/partial/reset.scss","hash":"7b70661d29a828d4f41954a27b419bbe7367b39e","modified":1708315116022},{"_id":"themes/instapaper/src/style/partial/normal.scss","hash":"9a27757b106ec510b231d979320d05d000a719b2","modified":1708315116022},{"_id":"themes/instapaper/yarn.lock","hash":"e587f9cd165e2b59747afdc3008430ba248f4dfb","modified":1708315116025},{"_id":"themes/3-hexo/.gitignore","hash":"46eca80fe689a00cbe4d015c094702af54119021","modified":1708316354167},{"_id":"themes/3-hexo/README.md","hash":"19b8cfe6690c28427492f342e74dda5ed49a1664","modified":1708316354168},{"_id":"themes/3-hexo/.DS_Store","hash":"0770f9d42bfdd8d420de48fed463015e001cf579","modified":1708316354166},{"_id":"themes/3-hexo/LICENSE","hash":"b04140c5f682db2b300428f97bb164fd7f5f18bd","modified":1708316354167},{"_id":"themes/3-hexo/languages/en.yml","hash":"616e02c035c86033ab4a97c5ae9e0a9e5f0b8ea3","modified":1708316354168},{"_id":"themes/3-hexo/languages/zh-CN.yml","hash":"83633d45420c96dfac41333aeac3f3616dca5286","modified":1708316354168},{"_id":"themes/3-hexo/layout/post.ejs","hash":"a0eaba41e7ec9db5843af482470a45531049b457","modified":1708316354179},{"_id":"themes/3-hexo/_config.yml","hash":"fae7a164ad8704778eeaa3eceac83ccbc7a41289","modified":1708316354168},{"_id":"themes/3-hexo/layout/index.ejs","hash":"1c185288c2925a652d577965626718e12df07f65","modified":1708316354178},{"_id":"themes/3-hexo/layout/indexs.md","hash":"8fab57dfc5c733b599d57dea6934a91e0fde0974","modified":1708316354178},{"_id":"themes/3-hexo/source/.DS_Store","hash":"fdcc907c46e093a14b153c5dc8c038461997ed3c","modified":1708316354179},{"_id":"themes/3-hexo/.github/ISSUE_TEMPLATE/bug_report.md","hash":"3df61acb19a16f12d8ec60cc5e353147a0a56d39","modified":1708316354166},{"_id":"themes/3-hexo/layout/_partial/comment.ejs","hash":"d18f94e04ef0cf7abb432a8e707ccb3abc7fe435","modified":1708316354171},{"_id":"themes/3-hexo/layout/_partial/article_copyright.ejs","hash":"9e1cdec49d5b9b44399348d96ecd7331f3ee7d85","modified":1708316354170},{"_id":"themes/3-hexo/layout/_partial/article.ejs","hash":"9e5afcc26f47f93c165072b0a2b5cbf72efb7ef9","modified":1708316354170},{"_id":"themes/3-hexo/layout/_partial/copyright.ejs","hash":"4c09f47e899fe36bfe36d92b12996219c2b5f622","modified":1708316354174},{"_id":"themes/3-hexo/layout/_partial/friends.ejs","hash":"e6dd90be668195016d6e1c51a6baefb50676e6ab","modified":1708316354175},{"_id":"themes/3-hexo/layout/_partial/dashang.ejs","hash":"b2a01cc1f0326965f0a186ce3c9b3c991fd4e2c9","modified":1708316354174},{"_id":"themes/3-hexo/layout/_partial/full-toc.ejs","hash":"60a085fab3165ea1fc6370abac0bd6ab1b2f2510","modified":1708316354175},{"_id":"themes/3-hexo/layout/_partial/tag.ejs","hash":"8704e6bd833d270cc6a494d4e7cf1dfeddedba40","modified":1708316354177},{"_id":"themes/3-hexo/layout/_partial/footer.ejs","hash":"ac22ad78628534b24a55d84bbe55d877329ffdf3","modified":1708316354175},{"_id":"themes/3-hexo/layout/_partial/header.ejs","hash":"233c7238136b9cc2c30fd4e66b113d8fd1c1726b","modified":1708316354175},{"_id":"themes/3-hexo/layout/_partial/toc-ref.ejs","hash":"33f7a4bfca1bb9835ec8f0d1e73188d1f56cc8b9","modified":1708316354177},{"_id":"themes/3-hexo/layout/_partial/mathjax.ejs","hash":"e2be0e37f3d48e63e65a47d819bfb800b9aa3784","modified":1708316354175},{"_id":"themes/3-hexo/layout/_partial/nav-right.ejs","hash":"0c693379995b09007727c2889c1a64e3bf98749e","modified":1708316354177},{"_id":"themes/3-hexo/layout/_partial/meta.ejs","hash":"ab6329ddd908b0567c18f39ac6a8553c6fec67c5","modified":1708316354175},{"_id":"themes/3-hexo/layout/_partial/nav-left.ejs","hash":"2fbca44ae051bf231c346c66350070c13371fb27","modified":1708316354177},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","hash":"8c2a4f10a4da3d9615a3a81542494c6d21479b3d","modified":1708316354206},{"_id":"themes/3-hexo/source/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1708316354206},{"_id":"themes/3-hexo/source/js/titleTip.js","hash":"7299ac046ddd6e6a4267d435f7b4c8198baaaccc","modified":1708316354207},{"_id":"themes/3-hexo/source/js/search.js","hash":"788c610149a5f9361295f9f0207c8523f37ddb8b","modified":1708316354207},{"_id":"themes/3-hexo/source/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1708316354198},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1708316354198},{"_id":"themes/3-hexo/source/js/script.js","hash":"a5eed169e7ff22e1a136d14de6159e9e59067b80","modified":1708316354207},{"_id":"themes/3-hexo/source/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1708316354199},{"_id":"themes/3-hexo/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1708316354199},{"_id":"themes/3-hexo/source/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1708316354199},{"_id":"themes/3-hexo/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1708316354199},{"_id":"themes/3-hexo/source/css/style.styl","hash":"29fa7f6619519c2dcfec4efac4314c5af659a92a","modified":1708316354196},{"_id":"themes/3-hexo/layout/_partial/comments/gitment.ejs","hash":"eaf2b6f297282606b630ad55fb9e38af7e2829dc","modified":1708316354172},{"_id":"themes/3-hexo/source/css/mobile.styl","hash":"1c2f8b7d7cf46f219adb3a628bdf380f29ff4a6b","modified":1708316354196},{"_id":"themes/3-hexo/source/css/gitalk.css","hash":"3dc58e9a3fd63a3144d5fe850eb55e3dc885c9fb","modified":1708316354190},{"_id":"themes/3-hexo/layout/_partial/comments/click2show.ejs","hash":"05b09c45b379ffeb4f48c1604044d88829f90799","modified":1708316354171},{"_id":"themes/3-hexo/layout/_partial/comments/disqus.ejs","hash":"32ce7b48d366b9c888ff2ceb911a3cd82f864537","modified":1708316354171},{"_id":"themes/3-hexo/layout/_partial/comments/utteranc.ejs","hash":"76f61b219bdcd1600f5e8c4be831b5b8c5f097fe","modified":1708316354173},{"_id":"themes/3-hexo/layout/_partial/comments/gitalk.ejs","hash":"01567e010cf4f2dd141fe2019490d3f0d5aa2529","modified":1708316354171},{"_id":"themes/3-hexo/layout/_partial/comments/livere.ejs","hash":"2d115e79cadedc2d5d8f4b5618559640d986e01f","modified":1708316354173},{"_id":"themes/3-hexo/source/css/_partial/comment.styl","hash":"d5fa333970a2eac66937d42eeb16fdb362e121ed","modified":1708316354180},{"_id":"themes/3-hexo/source/css/_partial/dashang.styl","hash":"f0eac1dc1f5dbed1769d032bb5fd5f002faaee26","modified":1708316354180},{"_id":"themes/3-hexo/source/css/_partial/full-toc.styl","hash":"9a732af065d0a80c9e420934be0f3582bf0129dc","modified":1708316354182},{"_id":"themes/3-hexo/source/css/_partial/fade.styl","hash":"02c7510a26f306e240f23ddbf772a69be2c890dd","modified":1708316354180},{"_id":"themes/3-hexo/source/css/_partial/num-load.styl","hash":"f7ef35459ece22e1da950b86126be1c2bfe97fcf","modified":1708316354183},{"_id":"themes/3-hexo/source/css/_partial/font.styl","hash":"3db01e603985e6dbcacb6b0f13dbd804f5849e3c","modified":1708316354182},{"_id":"themes/3-hexo/source/css/_partial/nprogress.styl","hash":"2620a02169a6aeb75137fd368eac2c36423d8498","modified":1708316354182},{"_id":"themes/3-hexo/source/css/_partial/nav-left.styl","hash":"4304a111489d22a97389e0403c51bb4de73f6609","modified":1708316354182},{"_id":"themes/3-hexo/source/css/_partial/nav-right.styl","hash":"b57fbac9d87f93ef88f97f86387ce9f2efa918d0","modified":1708316354182},{"_id":"themes/3-hexo/source/css/_partial/post.styl","hash":"f1251e2a3b5334af3a22b51fc0293c2456568b50","modified":1708316354183},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1708316354184},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","hash":"b5e7562c8494b0ddb3a70ecc5545ef7340d8e971","modified":1708316354184},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1708316354185},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1708316354185},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1708316354188},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1708316354187},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1708316354187},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1708316354190},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1708316354189},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","hash":"3630aabf2f9c0417f483ebd03d9e429dbc2594e0","modified":1708316354187},{"_id":"themes/3-hexo/source/css/fonts/selection.json","hash":"b6456a4eabcffd95e822d1d7adce96da524d481a","modified":1708316354189},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","hash":"553987211d3323a7dfc0b08786b183a3435978c9","modified":1708316354190},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1708316354191},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1708316354191},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1708316354191},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1708316354192},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1708316354193},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1708316354192},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1708316354192},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1708316354193},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1708316354193},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1708316354194},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","hash":"92941a6ae73b74f44ad7c559c5548c44073c644a","modified":1708316354196},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1708316354194},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1708316354194},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1708316354194},{"_id":"themes/3-hexo/source/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1708316354200},{"_id":"themes/3-hexo/source/js/gitment.js","hash":"67984b83cd46ff4300d4fd959bf6c17dd66b4136","modified":1708316354204},{"_id":"themes/3-hexo/source/js/gitalk.js","hash":"3e2e0cf9caa6b8d07b9c5e0733a1ccb3e244259f","modified":1708316354204},{"_id":"source/_posts/post-title-with-whitespace.md","hash":"a86ceb74901e60a9026ba9d461126b4e1fde015a","modified":1711290312200},{"_id":"source/_posts/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1711289747503},{"_id":"source/_posts/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1711289747514},{"_id":"source/_posts/.git/COMMIT_EDITMSG","hash":"e7cd712f91d43365e44c0a696c5ec9ecb71e5b72","modified":1711290224758},{"_id":"source/_posts/.git/config","hash":"6aabe10c0416ad84b3e77ceec62b3f959ee7f9fc","modified":1711290598183},{"_id":"source/_posts/.git/index","hash":"a5f6bde6c4887f7dfe3edfd7b51a3f8d774e7332","modified":1711289970458},{"_id":"source/_posts/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1711289747513},{"_id":"source/_posts/.git/logs/HEAD","hash":"85ae4437735e63e12dc014b935cb108c1093d3e4","modified":1711290224765},{"_id":"source/_posts/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1711289747505},{"_id":"source/_posts/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1711289747504},{"_id":"source/_posts/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1711289747506},{"_id":"source/_posts/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1711289747508},{"_id":"source/_posts/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1711289747507},{"_id":"source/_posts/.git/hooks/fsmonitor-watchman.sample","hash":"0ec0ec9ac11111433d17ea79e0ae8cec650dcfa4","modified":1711289747506},{"_id":"source/_posts/.git/hooks/pre-push.sample","hash":"a599b773b930ca83dbc3a5c7c13059ac4a6eaedc","modified":1711289747508},{"_id":"source/_posts/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1711289747510},{"_id":"source/_posts/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1711289747507},{"_id":"source/_posts/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1711289747510},{"_id":"source/_posts/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1711289747509},{"_id":"source/_posts/.git/hooks/update.sample","hash":"730e6bd5225478bab6147b7a62a6e2ae21d40507","modified":1711289747512},{"_id":"source/_posts/.git/refs/heads/master","hash":"bbd336be5f6c55956dac7093cd5e90bd4a0df8fc","modified":1711290224764},{"_id":"source/_posts/.git/hooks/push-to-checkout.sample","hash":"508240328c8b55f8157c93c43bf5e291e5d2fbcb","modified":1711289747511},{"_id":"source/_posts/.git/hooks/sendemail-validate.sample","hash":"74cf1d5415a5c03c110240f749491297d65c4c98","modified":1711289747512},{"_id":"source/_posts/.git/objects/82/1780cb6742b12cbadce214779241abc9b27439","hash":"584c24dc69008fa0d7bb0f4d322e949629b55fee","modified":1711289780853},{"_id":"source/_posts/.git/objects/78/bfedb28abb94355c5e0b07423103b66d8145cc","hash":"ab8ae7b55cbd16febff4a7a322eb4d75c72e4bc6","modified":1711289970455},{"_id":"source/_posts/.git/objects/8d/8f2a63d97d2fb379de2f32a72f7ef0fd11fbc3","hash":"636fea9526dc734f71722a3c3c4f7c678c4c7344","modified":1711289780855},{"_id":"source/_posts/.git/objects/2b/0a7991dac08b168f52c41510c224696e6cac33","hash":"6d309e3ed27ba436a58e9dcb28705b6dbe5e3a47","modified":1711289780851},{"_id":"source/_posts/.git/objects/8e/75ba7ca2f2e7f8a8938fca3834487e5c0f8635","hash":"5ee686d3ea3249e219b18325c24485eaa8e90d85","modified":1711290224759},{"_id":"source/_posts/.git/logs/refs/heads/master","hash":"85ae4437735e63e12dc014b935cb108c1093d3e4","modified":1711290224765},{"_id":"source/_posts/.git/refs/remotes/origin/master","hash":"bbd336be5f6c55956dac7093cd5e90bd4a0df8fc","modified":1711290598186},{"_id":"source/_posts/.git/logs/refs/remotes/origin/master","hash":"3e33a2b8e39a97de7b5e15721bb961c2cb298424","modified":1711290598187}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-02-18T13:11:36.281Z","updated":"2024-02-18T13:11:36.281Z","comments":1,"layout":"post","photos":[],"_id":"clsrjelqn0000fctf3tjggtxd","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"My New Post","date":"2024-02-19T03:13:42.000Z","_content":"\n# c++\n\n\n\n## 1变量\n\n  #### 变量本质上就是储存信息，包含信息储存在哪里，储存的值，储存信息的类型。\n\n  #### **语法**`数据类型 变量名 = 初始值;\n\n在c++中，使用变量首先需要声明，这样就能避免出现打错字造成的变量使用错误\n\n### 1.1类型\n\n#### 1.1.1整形\n\nC++中能够表示整型的类型有以下几种方式，**区别在于所占内存空间不同**：\n\n| **数据类型**        | **占用空间**                                    | 取值范围         |\n| ------------------- | ----------------------------------------------- | ---------------- |\n| short(短整型)       | 2字节                                           | (-2^15 ~ 2^15-1) |\n| int(整型)           | 4字节                                           | (-2^31 ~ 2^31-1) |\n| long(长整形)        | Windows为4字节，Linux为4字节(32位)，8字节(64位) | (-2^31 ~ 2^31-1) |\n| long long(长长整形) | 8字节                                           | (-2^63 ~ 2^63-1) |\n\n### 1.1.2 实型\n\n实行也有几种不同的表示方式，区别也是占用的内存空间不同\n\n| 数据类      | 占用空间 | 取值范围             |\n| ----------- | -------- | :------------------- |\n| float       | 四字节   | 七位有效数字         |\n| double      | 八字节   | 十五到十六位有效数字 |\n| long double |          |                      |\n\n## 2运算符\n\n### 2.1算术运算符\n\n处理基本运算\n\n|      |      |      |      |\n| ---- | ---- | ---- | ---- |\n|      |      |      |      |\n|      |      |      |      |\n|      |      |      |      |\n|      |      |      |      |\n\n### 2.1 比较运算符\n\n| 运算符号 | 意义     |      |\n| -------- | -------- | ---- |\n| !=       | 不等于   |      |\n| >=       | 大于等于 |      |\n| <=       | 小于等于 |      |\n| <        | 斯奥与   |      |\n| >        | 大于     |      |\n| ==       | 等于     |      |\n\n判断标准不限于整形与实型\n\n## 3程序执行结构![clip_image002-1541662552695](../../../Desktop/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%20(2)/assets/clip_image002-1541662552695.png)\n\n依据条件是否满足，重复执行某段代码\n\n示例代码：\n\n```c++\n#include<iostream>;\n#include<string>\nusing namespace std;\nint main()\n{\n\tint sorce;\n\tcout << \"请输入您的分数： \" << endl;\n\tcin >> sorce;\n\t\n\t if (500 < sorce)\n\t{\n\t\tcout << \"恭喜您考上了一本大学\" << endl;\n\t\tif (sorce > 700)\n\t\t{\n\t\t\tcout << \"恭喜您考上了清华北大\" << endl;\n\t\t}\n\t\telse if (650 < sorce &&sorce< 700)\n\t\t{\n\t\t\tcout << \"恭喜您考上了南京大学\" << endl;\n\t\t}\n\t\telse if(sorce<=650&&sorce >600)\n\t\t{\n\t\t\tcout << \"恭喜您考上了中南大学！！！\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"恭喜您考上了一本大学\" << endl;\n\t\t}\n\t}\n\telse if (400 < sorce &&sorce<= 500)\n\t{\n\t\tcout << \"很遗憾您没有考上一本大学，但您考上了三本大学\" << endl;\n\t}\n\telse\n\t{\n\t\tcout << \"未考上本科大学\" << endl;\n\t}\n\treturn 0;\n}\n```\n\n## 函数重载\n\n编译器对于同名函数选择是根据参数的数据类型；\n\n**注意**：\n\n* 对于引用编译器是做与本身的数据类型保持一致保持一致；\n* 不区分const变量与非const变量。\n\n\n\n## const赋值问题\n\n* 非指针类型\n\nconst会使变量名所指向的内存中存储的值不能发生改变，即使是赋值同样的值；\n\n\n\n```c++\nconst int a=3;\na = 3;//报错\n```\n\n\n\n* 指针类型\n\n非const int *可以赋值给非const int *，而非const int * 不可以赋值给const int *\n\n原因：\n\n1. const int * 表示，指向常量int 类型的指针，即指向的这块内存的内容，不可以修改。（但指针本身可以修改）。\n   int * 表示，指向非常量int类型的指针，指针这块内存的内容可修改，指针本身可修改。\n2. const int* 已经限制此地址内容，不可修改。\n3. 这时，却让 int * 指针指向这块地址，而使用 int * 指针，表示此地址内容可修改。那么到底可不可以改？\n   接上，因此逻辑冲突，编译器报错。\n\n```c++\nconst int* c_PtrA  =  new int(10);\nint * ptrB= new int(10);\n\nc_PtrA = ptrB; // 没问题\nptrB = c_PtrA; // 编译报错 不能从 const int* 转换程 int*\n\n// 下面这种情况不会报错，但可能造成程序崩溃\nptrB = (int*)c_PtrA;\n// ....\n*ptrB = 20; // 此处修改了b和a共同指向的地址的内容，程序崩溃\n```\n\n##　函数模版\n\n函数模版是一种特殊的函数，它模版允许以泛型（而不是某种数据类型）的方式编写程序。\n\n通例：　ｔｅｍｐｌａｔｅ＜ｃｌａｓｓ／ｔｙｐｅｎａｍｅ　类型名＞\n\n代码示例：\n\n\n\n```\n#include <iostream>\n\nusing namespace std;\n\n//template 关键字告诉C++编译器 要开始泛型编程了\n//T - 参数化数据类型\ntemplate <typename T>\nT Max(T a, T b) {\n\treturn a > b ? a : b;\n}\n\nint main(void)\n{\n\n\tint  n = 1;\n\tint\t m = 2;\n\tcout << \"max(1, 2) = \" << Max(n, m) << endl;\n\n\tfloat a = 2.0;\n\tfloat b = 3.0;\n\tcout << \"max(2.0, 3.0) = \" << Max(a, b) << endl;\n\n\tchar i = 'a';\n\tchar j = 'b';\n\tcout << \"max('a', 'b') = \" << Max(i, j) << endl;\n\t\n\treturn 0;\n}\n\n```\n\n注意：\n\n1. 函数模版可以实现函数重载，其中必须有不同的用于区分具体调用那个函数的的数据类型.\n2. 当某些数据无法处理时，并且有意义时，可以重载运算符。\n\n**显示具体化**\n\n相当于函数模版的的某个具体重载，就是模版要实现某个功能对于某种数据类型不适用，可以用显示具体化创造一个具体的函数，来使其适用。\n\n具体化模版优先于常规模版。非模版优先于具体化模版。\n\n## 类\n\n### 封装\n\n封装是C++面向对象三大特性之一\n\n封装的意义：\n\n* 将属性和行为作为一个整体，表现生活中的事物\n* 将属性和行为加以权限控制\n\n\n\n**封装意义一：**\n\n​\t在设计类的时候，属性和行为写在一起，表现事物\n\n~~~c++\n//圆周率\nconst double PI = 3.14;\n\n//1、封装的意义\n//将属性和行为作为一个整体，用来表现生活中的事物\n\n//封装一个圆类，求圆的周长\n//class代表设计一个类，后面跟着的是类名\nclass Circle\n{\npublic:  //访问权限  公共的权限\n\n\t//属性\n\tint m_r;//半径\n\n\t//行为\n\t//获取到圆的周长\n\tdouble calculateZC()\n\t{\n\t\t//2 * pi  * r\n\t\t//获取圆的周长\n\t\treturn  2 * PI * m_r;\n\t}\n};\n\nint main() {\n\n\t//通过圆类，创建圆的对象\n\t// c1就是一个具体的圆\n\tCircle c1;\n\tc1.m_r = 10; //给圆对象的半径 进行赋值操作\n\n\t//2 * pi * 10 = = 62.8\n\tcout << \"圆的周长为： \" << c1.calculateZC() << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n~~~\n\n**封装意义二：**\n\n类在设计时，可以把属性和行为放在不同的权限下，加以控制\n\n访问权限有三种：\n\n\n\n1. public        公共权限   **类内可以访问  类外可以访问**\n2. protected 保护权限     **类内可以访问 类外不可以访问**\n3. private      私有权限    **类内可以访问  类外不可以访问**\n\n**示例：**\n\n```C++\n//三种权限\n//公共权限  public     类内可以访问  类外可以访问\n//保护权限  protected  类内可以访问  类外不可以访问\n//私有权限  private    类内可以访问  类外不可以访问\n\nclass Person\n{\n\t//姓名  公共权限\npublic:\n\tstring m_Name;\n\n\t//汽车  保护权限\nprotected:\n\tstring m_Car;\n\n\t//银行卡密码  私有权限\nprivate:\n\tint m_Password;\n\npublic:\n\tvoid func()\n\t{\n\t\tm_Name = \"张三\";\n\t\tm_Car = \"拖拉机\";\n\t\tm_Password = 123456;\n\t}\n};\n\nint main() {\n\n\tPerson p;\n\tp.m_Name = \"李四\";\n\t//p.m_Car = \"奔驰\";  //保护权限类外访问不到\n\t//p.m_Password = 123; //私有权限类外访问不到\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n### struct和class区别\n\n\n\n在C++中 struct和class唯一的**区别**就在于 **默认的访问权限不同**\n\n区别：\n\n* struct 默认权限为公共\n* class   默认权限为私有\n\n**注意**\n\nstruct的成员属性即使在设置为private的情况下也可以通过在类内的函数进行修改与访问。\n\n### 深拷贝与浅拷贝\n\n浅拷贝是数值的简单复制，挡在兑取创建一个变量时，指针会指向这块内存，即保存内存的地址，拷贝时默认进行浅拷贝就会把内存地址赋值给目标类，而堆区数据需要在类使用完以后在西沟函数销毁以节省空间（**delete对赢指针，并赋值空指针**），这样就会调用两次析构函数，就会delete两次同一块内存导致崩溃，这好似就需要深拷贝来解决问题\n\n深拷贝：再在堆区开辟一块新的内存空间来存放需要拷贝的指针指向的数据，即new 数据类型（ 原类的变量名）\n\n~~~c++\nclass Person {\npublic:\n\t//无参（默认）构造函数\n\tPerson() {\n\t\tcout << \"无参构造函数!\" << endl;\n\t}\n\t//有参构造函数\n\tPerson(int age ,int height) {\n\t\t\n\t\tcout << \"有参构造函数!\" << endl;\n\n\t\tm_age = age;\n\t\tm_height = new int(height);\n\t\t\n\t}\n\t//拷贝构造函数  \n\tPerson(const Person& p) {\n\t\tcout << \"拷贝构造函数!\" << endl;\n\t\t//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题\n\t\tm_age = p.m_age;\n\t\tm_height = new int(*p.m_height);\n\t\t\n\t}\n\n\t//析构函数\n\t~Person() {\n\t\tcout << \"析构函数!\" << endl;\n\t\tif (m_height != NULL)\n\t\t{\n\t\t\tdelete m_height;\n\t\t}\n\t}\npublic:\n\tint m_age;\n\tint* m_height;\n};\n\nvoid test01()\n{\n\tPerson p1(18, 180);\n\n\tPerson p2(p1);\n\n\tcout << \"p1的年龄： \" << p1.m_age << \" 身高： \" << *p1.m_height << endl;\n\n\tcout << \"p2的年龄： \" << p2.m_age << \" 身高： \" << *p2.m_height << endl;\n}\n\nint main() {\n\n\ttest01();\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n~~~\n\n总结：在堆区开辟空间的在拷贝时一定要自己提供拷贝函数，防止崩溃\n\n### 初始化列表\n\n一种构造函数\n\n`构造函数()：属性1(值1),属性2（值2）... {}`\n\n~~~c++\nclass Person {\npublic:\n\n\t////传统方式初始化\n\t//Person(int a, int b, int c) {\n\t//\tm_A = a;\n\t//\tm_B = b;\n\t//\tm_C = c;\n\t//}\n\n\t//初始化列表方式初始化\n\tPerson(int a, int b, int c) :m_A(a), m_B(b), m_C(c) {}\n\tvoid PrintPerson() {\n\t\tcout << \"mA:\" << m_A << endl;\n\t\tcout << \"mB:\" << m_B << endl;\n\t\tcout << \"mC:\" << m_C << endl;\n\t}\nprivate:\n\tint m_A;\n\tint m_B;\n\tint m_C;\n};\n\nint main() {\n\n\tPerson p(1, 2, 3);\n\tp.PrintPerson();\n\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n~~~\n\n\n\n### 类作为类的对象\n\n假设有类A与B，A中的成员有B，则需要先声明B，在声明A，西析构时先析构，B再析构。\n\n### 静态成员\n\n静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员\n\n静态成员分为：\n\n*  静态成员变量\n   *  所有对象共享同一份数据\n   *  在编译阶段分配内存\n   *  类内声明，类外初始化\n*  静态成员函数\n   *  所有对象共享同一个函数\n   *  静态成员函数只能访问静态成员变量\n\n~~~c++\nclass Person\n{\n\t\npublic:\n\n\tstatic int m_A; //静态成员变量\n\n\t//静态成员变量特点：\n\t//1 在编译阶段分配内存\n\t//2 类内声明，类外初始化\n\t//3 所有对象共享同一份数据\n\nprivate:\n\tstatic int m_B; //静态成员变量也是有访问权限的\n};\nint Person::m_A = 10;\nint Person::m_B = 10;\n\nvoid test01()\n{\n\t//静态成员变量两种访问方式\n\t//1、通过对象\n\tPerson p1;\n\tp1.m_A = 100;\n\tcout << \"p1.m_A = \" << p1.m_A << endl;\n\tPerson p2;\n\tp2.m_A = 200;\n\tcout << \"p1.m_A = \" << p1.m_A << endl; //共享同一份数据\n\tcout << \"p2.m_A = \" << p2.m_A << endl;\n\t//2、通过类名\n\tcout << \"m_A = \" << Person::m_A << endl;\n\t//cout << \"m_B = \" << Person::m_B << endl; //私有权限访问不到\n}\nint main() {\n\ttest01();\n\tsystem(\"pause\");\n\treturn 0;\n}\n~~~\n\n~~~c++\nclass Person\n{\npublic:\n\t//静态成员函数特点：\n\t//1 程序共享一个函数\n\t//2 静态成员函数只能访问静态成员变量\n\tstatic void func()\n\t{\n\t\tcout << \"func调用\" << endl;\n\t\tm_A = 100;\n\t\t//m_B = 100; //错误，不可以访问非静态成员变量\n\t}\n\tstatic int m_A; //静态成员变量\n\tint m_B; // \nprivate:\n\n\t//静态成员函数也是有访问权限的\n\tstatic void func2()\n\t{\n\t\tcout << \"func2调用\" << endl;\n\t}\n};\nint Person::m_A = 10;\nvoid test01()\n{\n\t//静态成员变量两种访问方式\n\t//1、通过对象\n\tPerson p1;\n\tp1.func();\n\t//2、通过类名\n\tPerson::func();\n\t//Person::func2(); //私有权限访问不到\n}\nint main() {\n\ttest01();\n\tsystem(\"pause\");\n\treturn 0;\n}\n~~~\n\n注意：\n\n* 静态成员类内声明，类外初始化\n* 静态成员位于全局区，整个程序共享\n* 静态成员函数只能访问静态成员变量\n* 调用：类名+：：+函数名\\变量名\n\n### this指针\n\nthis指针的用途：\n\n*  当形参和成员变量同名时，可用this指针来区分\n*  在类的非静态成员函数中返回对象本身，可使用return *this\n\n~~~ c++\nclass Person\n{\npublic:\n\n\tPerson(int age)\n\t{\n\t\t//1、当形参和成员变量同名时，可用this指针来区分\n\t\tthis->age = age;\n\t}\n\n\tPerson& PersonAddPerson(Person p) //引用是为了返回p2本身\n\t{\n\t\tthis->age += p.age;\n\t\t//返回对象本身\n\t\treturn *this;//return是创建了一个副本，若要传回本身需要引用\n\t}\n\n\tint age;\n};\n\nvoid test01()\n{\n\tPerson p1(10);\n\tcout << \"p1.age = \" << p1.age << endl;\n\n\tPerson p2(10);\n\tp2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);\n\tcout << \"p2.age = \" << p2.age << endl;\n}\n\nint main() {\n\n\ttest01();\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n~~~\n\n","source":"_posts/My-New-Post.md","raw":"---\ntitle: My New Post\ndate: 2024-02-19 11:13:42\ntags:\n---\n\n# c++\n\n\n\n## 1变量\n\n  #### 变量本质上就是储存信息，包含信息储存在哪里，储存的值，储存信息的类型。\n\n  #### **语法**`数据类型 变量名 = 初始值;\n\n在c++中，使用变量首先需要声明，这样就能避免出现打错字造成的变量使用错误\n\n### 1.1类型\n\n#### 1.1.1整形\n\nC++中能够表示整型的类型有以下几种方式，**区别在于所占内存空间不同**：\n\n| **数据类型**        | **占用空间**                                    | 取值范围         |\n| ------------------- | ----------------------------------------------- | ---------------- |\n| short(短整型)       | 2字节                                           | (-2^15 ~ 2^15-1) |\n| int(整型)           | 4字节                                           | (-2^31 ~ 2^31-1) |\n| long(长整形)        | Windows为4字节，Linux为4字节(32位)，8字节(64位) | (-2^31 ~ 2^31-1) |\n| long long(长长整形) | 8字节                                           | (-2^63 ~ 2^63-1) |\n\n### 1.1.2 实型\n\n实行也有几种不同的表示方式，区别也是占用的内存空间不同\n\n| 数据类      | 占用空间 | 取值范围             |\n| ----------- | -------- | :------------------- |\n| float       | 四字节   | 七位有效数字         |\n| double      | 八字节   | 十五到十六位有效数字 |\n| long double |          |                      |\n\n## 2运算符\n\n### 2.1算术运算符\n\n处理基本运算\n\n|      |      |      |      |\n| ---- | ---- | ---- | ---- |\n|      |      |      |      |\n|      |      |      |      |\n|      |      |      |      |\n|      |      |      |      |\n\n### 2.1 比较运算符\n\n| 运算符号 | 意义     |      |\n| -------- | -------- | ---- |\n| !=       | 不等于   |      |\n| >=       | 大于等于 |      |\n| <=       | 小于等于 |      |\n| <        | 斯奥与   |      |\n| >        | 大于     |      |\n| ==       | 等于     |      |\n\n判断标准不限于整形与实型\n\n## 3程序执行结构![clip_image002-1541662552695](../../../Desktop/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%20(2)/assets/clip_image002-1541662552695.png)\n\n依据条件是否满足，重复执行某段代码\n\n示例代码：\n\n```c++\n#include<iostream>;\n#include<string>\nusing namespace std;\nint main()\n{\n\tint sorce;\n\tcout << \"请输入您的分数： \" << endl;\n\tcin >> sorce;\n\t\n\t if (500 < sorce)\n\t{\n\t\tcout << \"恭喜您考上了一本大学\" << endl;\n\t\tif (sorce > 700)\n\t\t{\n\t\t\tcout << \"恭喜您考上了清华北大\" << endl;\n\t\t}\n\t\telse if (650 < sorce &&sorce< 700)\n\t\t{\n\t\t\tcout << \"恭喜您考上了南京大学\" << endl;\n\t\t}\n\t\telse if(sorce<=650&&sorce >600)\n\t\t{\n\t\t\tcout << \"恭喜您考上了中南大学！！！\" << endl;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcout << \"恭喜您考上了一本大学\" << endl;\n\t\t}\n\t}\n\telse if (400 < sorce &&sorce<= 500)\n\t{\n\t\tcout << \"很遗憾您没有考上一本大学，但您考上了三本大学\" << endl;\n\t}\n\telse\n\t{\n\t\tcout << \"未考上本科大学\" << endl;\n\t}\n\treturn 0;\n}\n```\n\n## 函数重载\n\n编译器对于同名函数选择是根据参数的数据类型；\n\n**注意**：\n\n* 对于引用编译器是做与本身的数据类型保持一致保持一致；\n* 不区分const变量与非const变量。\n\n\n\n## const赋值问题\n\n* 非指针类型\n\nconst会使变量名所指向的内存中存储的值不能发生改变，即使是赋值同样的值；\n\n\n\n```c++\nconst int a=3;\na = 3;//报错\n```\n\n\n\n* 指针类型\n\n非const int *可以赋值给非const int *，而非const int * 不可以赋值给const int *\n\n原因：\n\n1. const int * 表示，指向常量int 类型的指针，即指向的这块内存的内容，不可以修改。（但指针本身可以修改）。\n   int * 表示，指向非常量int类型的指针，指针这块内存的内容可修改，指针本身可修改。\n2. const int* 已经限制此地址内容，不可修改。\n3. 这时，却让 int * 指针指向这块地址，而使用 int * 指针，表示此地址内容可修改。那么到底可不可以改？\n   接上，因此逻辑冲突，编译器报错。\n\n```c++\nconst int* c_PtrA  =  new int(10);\nint * ptrB= new int(10);\n\nc_PtrA = ptrB; // 没问题\nptrB = c_PtrA; // 编译报错 不能从 const int* 转换程 int*\n\n// 下面这种情况不会报错，但可能造成程序崩溃\nptrB = (int*)c_PtrA;\n// ....\n*ptrB = 20; // 此处修改了b和a共同指向的地址的内容，程序崩溃\n```\n\n##　函数模版\n\n函数模版是一种特殊的函数，它模版允许以泛型（而不是某种数据类型）的方式编写程序。\n\n通例：　ｔｅｍｐｌａｔｅ＜ｃｌａｓｓ／ｔｙｐｅｎａｍｅ　类型名＞\n\n代码示例：\n\n\n\n```\n#include <iostream>\n\nusing namespace std;\n\n//template 关键字告诉C++编译器 要开始泛型编程了\n//T - 参数化数据类型\ntemplate <typename T>\nT Max(T a, T b) {\n\treturn a > b ? a : b;\n}\n\nint main(void)\n{\n\n\tint  n = 1;\n\tint\t m = 2;\n\tcout << \"max(1, 2) = \" << Max(n, m) << endl;\n\n\tfloat a = 2.0;\n\tfloat b = 3.0;\n\tcout << \"max(2.0, 3.0) = \" << Max(a, b) << endl;\n\n\tchar i = 'a';\n\tchar j = 'b';\n\tcout << \"max('a', 'b') = \" << Max(i, j) << endl;\n\t\n\treturn 0;\n}\n\n```\n\n注意：\n\n1. 函数模版可以实现函数重载，其中必须有不同的用于区分具体调用那个函数的的数据类型.\n2. 当某些数据无法处理时，并且有意义时，可以重载运算符。\n\n**显示具体化**\n\n相当于函数模版的的某个具体重载，就是模版要实现某个功能对于某种数据类型不适用，可以用显示具体化创造一个具体的函数，来使其适用。\n\n具体化模版优先于常规模版。非模版优先于具体化模版。\n\n## 类\n\n### 封装\n\n封装是C++面向对象三大特性之一\n\n封装的意义：\n\n* 将属性和行为作为一个整体，表现生活中的事物\n* 将属性和行为加以权限控制\n\n\n\n**封装意义一：**\n\n​\t在设计类的时候，属性和行为写在一起，表现事物\n\n~~~c++\n//圆周率\nconst double PI = 3.14;\n\n//1、封装的意义\n//将属性和行为作为一个整体，用来表现生活中的事物\n\n//封装一个圆类，求圆的周长\n//class代表设计一个类，后面跟着的是类名\nclass Circle\n{\npublic:  //访问权限  公共的权限\n\n\t//属性\n\tint m_r;//半径\n\n\t//行为\n\t//获取到圆的周长\n\tdouble calculateZC()\n\t{\n\t\t//2 * pi  * r\n\t\t//获取圆的周长\n\t\treturn  2 * PI * m_r;\n\t}\n};\n\nint main() {\n\n\t//通过圆类，创建圆的对象\n\t// c1就是一个具体的圆\n\tCircle c1;\n\tc1.m_r = 10; //给圆对象的半径 进行赋值操作\n\n\t//2 * pi * 10 = = 62.8\n\tcout << \"圆的周长为： \" << c1.calculateZC() << endl;\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n~~~\n\n**封装意义二：**\n\n类在设计时，可以把属性和行为放在不同的权限下，加以控制\n\n访问权限有三种：\n\n\n\n1. public        公共权限   **类内可以访问  类外可以访问**\n2. protected 保护权限     **类内可以访问 类外不可以访问**\n3. private      私有权限    **类内可以访问  类外不可以访问**\n\n**示例：**\n\n```C++\n//三种权限\n//公共权限  public     类内可以访问  类外可以访问\n//保护权限  protected  类内可以访问  类外不可以访问\n//私有权限  private    类内可以访问  类外不可以访问\n\nclass Person\n{\n\t//姓名  公共权限\npublic:\n\tstring m_Name;\n\n\t//汽车  保护权限\nprotected:\n\tstring m_Car;\n\n\t//银行卡密码  私有权限\nprivate:\n\tint m_Password;\n\npublic:\n\tvoid func()\n\t{\n\t\tm_Name = \"张三\";\n\t\tm_Car = \"拖拉机\";\n\t\tm_Password = 123456;\n\t}\n};\n\nint main() {\n\n\tPerson p;\n\tp.m_Name = \"李四\";\n\t//p.m_Car = \"奔驰\";  //保护权限类外访问不到\n\t//p.m_Password = 123; //私有权限类外访问不到\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n```\n\n### struct和class区别\n\n\n\n在C++中 struct和class唯一的**区别**就在于 **默认的访问权限不同**\n\n区别：\n\n* struct 默认权限为公共\n* class   默认权限为私有\n\n**注意**\n\nstruct的成员属性即使在设置为private的情况下也可以通过在类内的函数进行修改与访问。\n\n### 深拷贝与浅拷贝\n\n浅拷贝是数值的简单复制，挡在兑取创建一个变量时，指针会指向这块内存，即保存内存的地址，拷贝时默认进行浅拷贝就会把内存地址赋值给目标类，而堆区数据需要在类使用完以后在西沟函数销毁以节省空间（**delete对赢指针，并赋值空指针**），这样就会调用两次析构函数，就会delete两次同一块内存导致崩溃，这好似就需要深拷贝来解决问题\n\n深拷贝：再在堆区开辟一块新的内存空间来存放需要拷贝的指针指向的数据，即new 数据类型（ 原类的变量名）\n\n~~~c++\nclass Person {\npublic:\n\t//无参（默认）构造函数\n\tPerson() {\n\t\tcout << \"无参构造函数!\" << endl;\n\t}\n\t//有参构造函数\n\tPerson(int age ,int height) {\n\t\t\n\t\tcout << \"有参构造函数!\" << endl;\n\n\t\tm_age = age;\n\t\tm_height = new int(height);\n\t\t\n\t}\n\t//拷贝构造函数  \n\tPerson(const Person& p) {\n\t\tcout << \"拷贝构造函数!\" << endl;\n\t\t//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题\n\t\tm_age = p.m_age;\n\t\tm_height = new int(*p.m_height);\n\t\t\n\t}\n\n\t//析构函数\n\t~Person() {\n\t\tcout << \"析构函数!\" << endl;\n\t\tif (m_height != NULL)\n\t\t{\n\t\t\tdelete m_height;\n\t\t}\n\t}\npublic:\n\tint m_age;\n\tint* m_height;\n};\n\nvoid test01()\n{\n\tPerson p1(18, 180);\n\n\tPerson p2(p1);\n\n\tcout << \"p1的年龄： \" << p1.m_age << \" 身高： \" << *p1.m_height << endl;\n\n\tcout << \"p2的年龄： \" << p2.m_age << \" 身高： \" << *p2.m_height << endl;\n}\n\nint main() {\n\n\ttest01();\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n~~~\n\n总结：在堆区开辟空间的在拷贝时一定要自己提供拷贝函数，防止崩溃\n\n### 初始化列表\n\n一种构造函数\n\n`构造函数()：属性1(值1),属性2（值2）... {}`\n\n~~~c++\nclass Person {\npublic:\n\n\t////传统方式初始化\n\t//Person(int a, int b, int c) {\n\t//\tm_A = a;\n\t//\tm_B = b;\n\t//\tm_C = c;\n\t//}\n\n\t//初始化列表方式初始化\n\tPerson(int a, int b, int c) :m_A(a), m_B(b), m_C(c) {}\n\tvoid PrintPerson() {\n\t\tcout << \"mA:\" << m_A << endl;\n\t\tcout << \"mB:\" << m_B << endl;\n\t\tcout << \"mC:\" << m_C << endl;\n\t}\nprivate:\n\tint m_A;\n\tint m_B;\n\tint m_C;\n};\n\nint main() {\n\n\tPerson p(1, 2, 3);\n\tp.PrintPerson();\n\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n~~~\n\n\n\n### 类作为类的对象\n\n假设有类A与B，A中的成员有B，则需要先声明B，在声明A，西析构时先析构，B再析构。\n\n### 静态成员\n\n静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员\n\n静态成员分为：\n\n*  静态成员变量\n   *  所有对象共享同一份数据\n   *  在编译阶段分配内存\n   *  类内声明，类外初始化\n*  静态成员函数\n   *  所有对象共享同一个函数\n   *  静态成员函数只能访问静态成员变量\n\n~~~c++\nclass Person\n{\n\t\npublic:\n\n\tstatic int m_A; //静态成员变量\n\n\t//静态成员变量特点：\n\t//1 在编译阶段分配内存\n\t//2 类内声明，类外初始化\n\t//3 所有对象共享同一份数据\n\nprivate:\n\tstatic int m_B; //静态成员变量也是有访问权限的\n};\nint Person::m_A = 10;\nint Person::m_B = 10;\n\nvoid test01()\n{\n\t//静态成员变量两种访问方式\n\t//1、通过对象\n\tPerson p1;\n\tp1.m_A = 100;\n\tcout << \"p1.m_A = \" << p1.m_A << endl;\n\tPerson p2;\n\tp2.m_A = 200;\n\tcout << \"p1.m_A = \" << p1.m_A << endl; //共享同一份数据\n\tcout << \"p2.m_A = \" << p2.m_A << endl;\n\t//2、通过类名\n\tcout << \"m_A = \" << Person::m_A << endl;\n\t//cout << \"m_B = \" << Person::m_B << endl; //私有权限访问不到\n}\nint main() {\n\ttest01();\n\tsystem(\"pause\");\n\treturn 0;\n}\n~~~\n\n~~~c++\nclass Person\n{\npublic:\n\t//静态成员函数特点：\n\t//1 程序共享一个函数\n\t//2 静态成员函数只能访问静态成员变量\n\tstatic void func()\n\t{\n\t\tcout << \"func调用\" << endl;\n\t\tm_A = 100;\n\t\t//m_B = 100; //错误，不可以访问非静态成员变量\n\t}\n\tstatic int m_A; //静态成员变量\n\tint m_B; // \nprivate:\n\n\t//静态成员函数也是有访问权限的\n\tstatic void func2()\n\t{\n\t\tcout << \"func2调用\" << endl;\n\t}\n};\nint Person::m_A = 10;\nvoid test01()\n{\n\t//静态成员变量两种访问方式\n\t//1、通过对象\n\tPerson p1;\n\tp1.func();\n\t//2、通过类名\n\tPerson::func();\n\t//Person::func2(); //私有权限访问不到\n}\nint main() {\n\ttest01();\n\tsystem(\"pause\");\n\treturn 0;\n}\n~~~\n\n注意：\n\n* 静态成员类内声明，类外初始化\n* 静态成员位于全局区，整个程序共享\n* 静态成员函数只能访问静态成员变量\n* 调用：类名+：：+函数名\\变量名\n\n### this指针\n\nthis指针的用途：\n\n*  当形参和成员变量同名时，可用this指针来区分\n*  在类的非静态成员函数中返回对象本身，可使用return *this\n\n~~~ c++\nclass Person\n{\npublic:\n\n\tPerson(int age)\n\t{\n\t\t//1、当形参和成员变量同名时，可用this指针来区分\n\t\tthis->age = age;\n\t}\n\n\tPerson& PersonAddPerson(Person p) //引用是为了返回p2本身\n\t{\n\t\tthis->age += p.age;\n\t\t//返回对象本身\n\t\treturn *this;//return是创建了一个副本，若要传回本身需要引用\n\t}\n\n\tint age;\n};\n\nvoid test01()\n{\n\tPerson p1(10);\n\tcout << \"p1.age = \" << p1.age << endl;\n\n\tPerson p2(10);\n\tp2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);\n\tcout << \"p2.age = \" << p2.age << endl;\n}\n\nint main() {\n\n\ttest01();\n\n\tsystem(\"pause\");\n\n\treturn 0;\n}\n~~~\n\n","slug":"My-New-Post","published":1,"updated":"2024-03-20T06:38:09.615Z","_id":"clssf2tz700005otf2vlq96ad","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h1><h2 id=\"1变量\"><a href=\"#1变量\" class=\"headerlink\" title=\"1变量\"></a>1变量</h2><h4 id=\"变量本质上就是储存信息，包含信息储存在哪里，储存的值，储存信息的类型。\"><a href=\"#变量本质上就是储存信息，包含信息储存在哪里，储存的值，储存信息的类型。\" class=\"headerlink\" title=\"变量本质上就是储存信息，包含信息储存在哪里，储存的值，储存信息的类型。\"></a>变量本质上就是储存信息，包含信息储存在哪里，储存的值，储存信息的类型。</h4><h4 id=\"语法-数据类型-变量名-初始值\"><a href=\"#语法-数据类型-变量名-初始值\" class=\"headerlink\" title=\"语法&#96;数据类型 变量名 &#x3D; 初始值;\"></a><strong>语法</strong>&#96;数据类型 变量名 &#x3D; 初始值;</h4><p>在c++中，使用变量首先需要声明，这样就能避免出现打错字造成的变量使用错误</p>\n<h3 id=\"1-1类型\"><a href=\"#1-1类型\" class=\"headerlink\" title=\"1.1类型\"></a>1.1类型</h3><h4 id=\"1-1-1整形\"><a href=\"#1-1-1整形\" class=\"headerlink\" title=\"1.1.1整形\"></a>1.1.1整形</h4><p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>占用空间</strong></th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>short(短整型)</td>\n<td>2字节</td>\n<td>(-2^15 ~ 2^15-1)</td>\n</tr>\n<tr>\n<td>int(整型)</td>\n<td>4字节</td>\n<td>(-2^31 ~ 2^31-1)</td>\n</tr>\n<tr>\n<td>long(长整形)</td>\n<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>\n<td>(-2^31 ~ 2^31-1)</td>\n</tr>\n<tr>\n<td>long long(长长整形)</td>\n<td>8字节</td>\n<td>(-2^63 ~ 2^63-1)</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-1-2-实型\"><a href=\"#1-1-2-实型\" class=\"headerlink\" title=\"1.1.2 实型\"></a>1.1.2 实型</h3><p>实行也有几种不同的表示方式，区别也是占用的内存空间不同</p>\n<table>\n<thead>\n<tr>\n<th>数据类</th>\n<th>占用空间</th>\n<th align=\"left\">取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>float</td>\n<td>四字节</td>\n<td align=\"left\">七位有效数字</td>\n</tr>\n<tr>\n<td>double</td>\n<td>八字节</td>\n<td align=\"left\">十五到十六位有效数字</td>\n</tr>\n<tr>\n<td>long double</td>\n<td></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"2运算符\"><a href=\"#2运算符\" class=\"headerlink\" title=\"2运算符\"></a>2运算符</h2><h3 id=\"2-1算术运算符\"><a href=\"#2-1算术运算符\" class=\"headerlink\" title=\"2.1算术运算符\"></a>2.1算术运算符</h3><p>处理基本运算</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"2-1-比较运算符\"><a href=\"#2-1-比较运算符\" class=\"headerlink\" title=\"2.1 比较运算符\"></a>2.1 比较运算符</h3><table>\n<thead>\n<tr>\n<th>运算符号</th>\n<th>意义</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>!&#x3D;</td>\n<td>不等于</td>\n<td></td>\n</tr>\n<tr>\n<td>&gt;&#x3D;</td>\n<td>大于等于</td>\n<td></td>\n</tr>\n<tr>\n<td>&lt;&#x3D;</td>\n<td>小于等于</td>\n<td></td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>斯奥与</td>\n<td></td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x3D;&#x3D;</td>\n<td>等于</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>判断标准不限于整形与实型</p>\n<h2 id=\"3程序执行结构\"><a href=\"#3程序执行结构\" class=\"headerlink\" title=\"3程序执行结构\"></a>3程序执行结构<img src=\"/../../../Desktop/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%20(2)/assets/clip_image002-1541662552695.png\" alt=\"clip_image002-1541662552695\"></h2><p>依据条件是否满足，重复执行某段代码</p>\n<p>示例代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span>;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sorce;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入您的分数： &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcin &gt;&gt; sorce;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t <span class=\"keyword\">if</span> (<span class=\"number\">500</span> &lt; sorce)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;恭喜您考上了一本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (sorce &gt; <span class=\"number\">700</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;恭喜您考上了清华北大&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"number\">650</span> &lt; sorce &amp;&amp;sorce&lt; <span class=\"number\">700</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;恭喜您考上了南京大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sorce&lt;=<span class=\"number\">650</span>&amp;&amp;sorce &gt;<span class=\"number\">600</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;恭喜您考上了中南大学！！！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;恭喜您考上了一本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"number\">400</span> &lt; sorce &amp;&amp;sorce&lt;= <span class=\"number\">500</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;很遗憾您没有考上一本大学，但您考上了三本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;未考上本科大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数重载\"><a href=\"#函数重载\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h2><p>编译器对于同名函数选择是根据参数的数据类型；</p>\n<p><strong>注意</strong>：</p>\n<ul>\n<li>对于引用编译器是做与本身的数据类型保持一致保持一致；</li>\n<li>不区分const变量与非const变量。</li>\n</ul>\n<h2 id=\"const赋值问题\"><a href=\"#const赋值问题\" class=\"headerlink\" title=\"const赋值问题\"></a>const赋值问题</h2><ul>\n<li>非指针类型</li>\n</ul>\n<p>const会使变量名所指向的内存中存储的值不能发生改变，即使是赋值同样的值；</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> a=<span class=\"number\">3</span>;</span><br><span class=\"line\">a = <span class=\"number\">3</span>;<span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>指针类型</li>\n</ul>\n<p>非const int *可以赋值给非const int *，而非const int * 不可以赋值给const int *</p>\n<p>原因：</p>\n<ol>\n<li>const int * 表示，指向常量int 类型的指针，即指向的这块内存的内容，不可以修改。（但指针本身可以修改）。<br>int * 表示，指向非常量int类型的指针，指针这块内存的内容可修改，指针本身可修改。</li>\n<li>const int* 已经限制此地址内容，不可修改。</li>\n<li>这时，却让 int * 指针指向这块地址，而使用 int * 指针，表示此地址内容可修改。那么到底可不可以改？<br>接上，因此逻辑冲突，编译器报错。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span>* c_PtrA  =  <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> * ptrB= <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">c_PtrA = ptrB; <span class=\"comment\">// 没问题</span></span><br><span class=\"line\">ptrB = c_PtrA; <span class=\"comment\">// 编译报错 不能从 const int* 转换程 int*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面这种情况不会报错，但可能造成程序崩溃</span></span><br><span class=\"line\">ptrB = (<span class=\"type\">int</span>*)c_PtrA;</span><br><span class=\"line\"><span class=\"comment\">// ....</span></span><br><span class=\"line\">*ptrB = <span class=\"number\">20</span>; <span class=\"comment\">// 此处修改了b和a共同指向的地址的内容，程序崩溃</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数模版\"><a href=\"#函数模版\" class=\"headerlink\" title=\"函数模版\"></a>函数模版</h2><p>函数模版是一种特殊的函数，它模版允许以泛型（而不是某种数据类型）的方式编写程序。</p>\n<p>通例：　ｔｅｍｐｌａｔｅ＜ｃｌａｓｓ／ｔｙｐｅｎａｍｅ　类型名＞</p>\n<p>代码示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">//template 关键字告诉C++编译器 要开始泛型编程了</span><br><span class=\"line\">//T - 参数化数据类型</span><br><span class=\"line\">template &lt;typename T&gt;</span><br><span class=\"line\">T Max(T a, T b) &#123;</span><br><span class=\"line\">\treturn a &gt; b ? a : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tint  n = 1;</span><br><span class=\"line\">\tint\t m = 2;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;max(1, 2) = &quot; &lt;&lt; Max(n, m) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfloat a = 2.0;</span><br><span class=\"line\">\tfloat b = 3.0;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;max(2.0, 3.0) = &quot; &lt;&lt; Max(a, b) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tchar i = &#x27;a&#x27;;</span><br><span class=\"line\">\tchar j = &#x27;b&#x27;;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;max(&#x27;a&#x27;, &#x27;b&#x27;) = &quot; &lt;&lt; Max(i, j) &lt;&lt; endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<ol>\n<li>函数模版可以实现函数重载，其中必须有不同的用于区分具体调用那个函数的的数据类型.</li>\n<li>当某些数据无法处理时，并且有意义时，可以重载运算符。</li>\n</ol>\n<p><strong>显示具体化</strong></p>\n<p>相当于函数模版的的某个具体重载，就是模版要实现某个功能对于某种数据类型不适用，可以用显示具体化创造一个具体的函数，来使其适用。</p>\n<p>具体化模版优先于常规模版。非模版优先于具体化模版。</p>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><p>封装是C++面向对象三大特性之一</p>\n<p>封装的意义：</p>\n<ul>\n<li>将属性和行为作为一个整体，表现生活中的事物</li>\n<li>将属性和行为加以权限控制</li>\n</ul>\n<p><strong>封装意义一：</strong></p>\n<p>​\t在设计类的时候，属性和行为写在一起，表现事物</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//圆周率</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> PI = <span class=\"number\">3.14</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1、封装的意义</span></span><br><span class=\"line\"><span class=\"comment\">//将属性和行为作为一个整体，用来表现生活中的事物</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//封装一个圆类，求圆的周长</span></span><br><span class=\"line\"><span class=\"comment\">//class代表设计一个类，后面跟着的是类名</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:  <span class=\"comment\">//访问权限  公共的权限</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//属性</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> m_r;<span class=\"comment\">//半径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//行为</span></span><br><span class=\"line\">\t<span class=\"comment\">//获取到圆的周长</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">calculateZC</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//2 * pi  * r</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//获取圆的周长</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>  <span class=\"number\">2</span> * PI * m_r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//通过圆类，创建圆的对象</span></span><br><span class=\"line\">\t<span class=\"comment\">// c1就是一个具体的圆</span></span><br><span class=\"line\">\tCircle c1;</span><br><span class=\"line\">\tc1.m_r = <span class=\"number\">10</span>; <span class=\"comment\">//给圆对象的半径 进行赋值操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2 * pi * 10 = = 62.8</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;圆的周长为： &quot;</span> &lt;&lt; c1.<span class=\"built_in\">calculateZC</span>() &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>封装意义二：</strong></p>\n<p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p>\n<p>访问权限有三种：</p>\n<ol>\n<li>public        公共权限   <strong>类内可以访问  类外可以访问</strong></li>\n<li>protected 保护权限     <strong>类内可以访问 类外不可以访问</strong></li>\n<li>private      私有权限    <strong>类内可以访问  类外不可以访问</strong></li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//三种权限</span></span><br><span class=\"line\"><span class=\"comment\">//公共权限  public     类内可以访问  类外可以访问</span></span><br><span class=\"line\"><span class=\"comment\">//保护权限  protected  类内可以访问  类外不可以访问</span></span><br><span class=\"line\"><span class=\"comment\">//私有权限  private    类内可以访问  类外不可以访问</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//姓名  公共权限</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tstring m_Name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//汽车  保护权限</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\tstring m_Car;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//银行卡密码  私有权限</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_Password;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_Name = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\">\t\tm_Car = <span class=\"string\">&quot;拖拉机&quot;</span>;</span><br><span class=\"line\">\t\tm_Password = <span class=\"number\">123456</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson p;</span><br><span class=\"line\">\tp.m_Name = <span class=\"string\">&quot;李四&quot;</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//p.m_Car = &quot;奔驰&quot;;  //保护权限类外访问不到</span></span><br><span class=\"line\">\t<span class=\"comment\">//p.m_Password = 123; //私有权限类外访问不到</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"struct和class区别\"><a href=\"#struct和class区别\" class=\"headerlink\" title=\"struct和class区别\"></a>struct和class区别</h3><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p>\n<p>区别：</p>\n<ul>\n<li>struct 默认权限为公共</li>\n<li>class   默认权限为私有</li>\n</ul>\n<p><strong>注意</strong></p>\n<p>struct的成员属性即使在设置为private的情况下也可以通过在类内的函数进行修改与访问。</p>\n<h3 id=\"深拷贝与浅拷贝\"><a href=\"#深拷贝与浅拷贝\" class=\"headerlink\" title=\"深拷贝与浅拷贝\"></a>深拷贝与浅拷贝</h3><p>浅拷贝是数值的简单复制，挡在兑取创建一个变量时，指针会指向这块内存，即保存内存的地址，拷贝时默认进行浅拷贝就会把内存地址赋值给目标类，而堆区数据需要在类使用完以后在西沟函数销毁以节省空间（<strong>delete对赢指针，并赋值空指针</strong>），这样就会调用两次析构函数，就会delete两次同一块内存导致崩溃，这好似就需要深拷贝来解决问题</p>\n<p>深拷贝：再在堆区开辟一块新的内存空间来存放需要拷贝的指针指向的数据，即new 数据类型（ 原类的变量名）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//无参（默认）构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>() &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//有参构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">int</span> age ,<span class=\"type\">int</span> height) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tm_age = age;</span><br><span class=\"line\">\t\tm_height = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(height);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//拷贝构造函数  </span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">const</span> Person&amp; p) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题</span></span><br><span class=\"line\">\t\tm_age = p.m_age;</span><br><span class=\"line\">\t\tm_height = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(*p.m_height);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">\t~<span class=\"built_in\">Person</span>() &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m_height != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> m_height;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_age;</span><br><span class=\"line\">\t<span class=\"type\">int</span>* m_height;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">18</span>, <span class=\"number\">180</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(p1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p1的年龄： &quot;</span> &lt;&lt; p1.m_age &lt;&lt; <span class=\"string\">&quot; 身高： &quot;</span> &lt;&lt; *p1.m_height &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p2的年龄： &quot;</span> &lt;&lt; p2.m_age &lt;&lt; <span class=\"string\">&quot; 身高： &quot;</span> &lt;&lt; *p2.m_height &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：在堆区开辟空间的在拷贝时一定要自己提供拷贝函数，防止崩溃</p>\n<h3 id=\"初始化列表\"><a href=\"#初始化列表\" class=\"headerlink\" title=\"初始化列表\"></a>初始化列表</h3><p>一种构造函数</p>\n<p><code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">////传统方式初始化</span></span><br><span class=\"line\">\t<span class=\"comment\">//Person(int a, int b, int c) &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tm_A = a;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tm_B = b;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tm_C = c;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//初始化列表方式初始化</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> c) :<span class=\"built_in\">m_A</span>(a), <span class=\"built_in\">m_B</span>(b), <span class=\"built_in\">m_C</span>(c) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintPerson</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;mA:&quot;</span> &lt;&lt; m_A &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;mB:&quot;</span> &lt;&lt; m_B &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;mC:&quot;</span> &lt;&lt; m_C &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_A;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_B;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_C;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\">\tp.<span class=\"built_in\">PrintPerson</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"类作为类的对象\"><a href=\"#类作为类的对象\" class=\"headerlink\" title=\"类作为类的对象\"></a>类作为类的对象</h3><p>假设有类A与B，A中的成员有B，则需要先声明B，在声明A，西析构时先析构，B再析构。</p>\n<h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p>\n<p>静态成员分为：</p>\n<ul>\n<li>静态成员变量<ul>\n<li>所有对象共享同一份数据</li>\n<li>在编译阶段分配内存</li>\n<li>类内声明，类外初始化</li>\n</ul>\n</li>\n<li>静态成员函数<ul>\n<li>所有对象共享同一个函数</li>\n<li>静态成员函数只能访问静态成员变量</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> m_A; <span class=\"comment\">//静态成员变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//静态成员变量特点：</span></span><br><span class=\"line\">\t<span class=\"comment\">//1 在编译阶段分配内存</span></span><br><span class=\"line\">\t<span class=\"comment\">//2 类内声明，类外初始化</span></span><br><span class=\"line\">\t<span class=\"comment\">//3 所有对象共享同一份数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> m_B; <span class=\"comment\">//静态成员变量也是有访问权限的</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> Person::m_A = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> Person::m_B = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//静态成员变量两种访问方式</span></span><br><span class=\"line\">\t<span class=\"comment\">//1、通过对象</span></span><br><span class=\"line\">\tPerson p1;</span><br><span class=\"line\">\tp1.m_A = <span class=\"number\">100</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; endl;</span><br><span class=\"line\">\tPerson p2;</span><br><span class=\"line\">\tp2.m_A = <span class=\"number\">200</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; endl; <span class=\"comment\">//共享同一份数据</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p2.m_A = &quot;</span> &lt;&lt; p2.m_A &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//2、通过类名</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;m_A = &quot;</span> &lt;&lt; Person::m_A &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//静态成员函数特点：</span></span><br><span class=\"line\">\t<span class=\"comment\">//1 程序共享一个函数</span></span><br><span class=\"line\">\t<span class=\"comment\">//2 静态成员函数只能访问静态成员变量</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;func调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\tm_A = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//m_B = 100; //错误，不可以访问非静态成员变量</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> m_A; <span class=\"comment\">//静态成员变量</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> m_B; <span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//静态成员函数也是有访问权限的</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;func2调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> Person::m_A = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//静态成员变量两种访问方式</span></span><br><span class=\"line\">\t<span class=\"comment\">//1、通过对象</span></span><br><span class=\"line\">\tPerson p1;</span><br><span class=\"line\">\tp1.<span class=\"built_in\">func</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//2、通过类名</span></span><br><span class=\"line\">\tPerson::<span class=\"built_in\">func</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//Person::func2(); //私有权限访问不到</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<ul>\n<li>静态成员类内声明，类外初始化</li>\n<li>静态成员位于全局区，整个程序共享</li>\n<li>静态成员函数只能访问静态成员变量</li>\n<li>调用：类名+：：+函数名\\变量名</li>\n</ul>\n<h3 id=\"this指针\"><a href=\"#this指针\" class=\"headerlink\" title=\"this指针\"></a>this指针</h3><p>this指针的用途：</p>\n<ul>\n<li>当形参和成员变量同名时，可用this指针来区分</li>\n<li>在类的非静态成员函数中返回对象本身，可使用return *this</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">int</span> age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//1、当形参和成员变量同名时，可用this指针来区分</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person&amp; <span class=\"title\">PersonAddPerson</span><span class=\"params\">(Person p)</span> <span class=\"comment\">//引用是为了返回p2本身</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;age += p.age;</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回对象本身</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;<span class=\"comment\">//return是创建了一个副本，若要传回本身需要引用</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p1.age = &quot;</span> &lt;&lt; p1.age &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\tp2.<span class=\"built_in\">PersonAddPerson</span>(p1).<span class=\"built_in\">PersonAddPerson</span>(p1).<span class=\"built_in\">PersonAddPerson</span>(p1);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h1 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h1><h2 id=\"1变量\"><a href=\"#1变量\" class=\"headerlink\" title=\"1变量\"></a>1变量</h2><h4 id=\"变量本质上就是储存信息，包含信息储存在哪里，储存的值，储存信息的类型。\"><a href=\"#变量本质上就是储存信息，包含信息储存在哪里，储存的值，储存信息的类型。\" class=\"headerlink\" title=\"变量本质上就是储存信息，包含信息储存在哪里，储存的值，储存信息的类型。\"></a>变量本质上就是储存信息，包含信息储存在哪里，储存的值，储存信息的类型。</h4><h4 id=\"语法-数据类型-变量名-初始值\"><a href=\"#语法-数据类型-变量名-初始值\" class=\"headerlink\" title=\"语法&#96;数据类型 变量名 &#x3D; 初始值;\"></a><strong>语法</strong>&#96;数据类型 变量名 &#x3D; 初始值;</h4><p>在c++中，使用变量首先需要声明，这样就能避免出现打错字造成的变量使用错误</p>\n<h3 id=\"1-1类型\"><a href=\"#1-1类型\" class=\"headerlink\" title=\"1.1类型\"></a>1.1类型</h3><h4 id=\"1-1-1整形\"><a href=\"#1-1-1整形\" class=\"headerlink\" title=\"1.1.1整形\"></a>1.1.1整形</h4><p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>占用空间</strong></th>\n<th>取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>short(短整型)</td>\n<td>2字节</td>\n<td>(-2^15 ~ 2^15-1)</td>\n</tr>\n<tr>\n<td>int(整型)</td>\n<td>4字节</td>\n<td>(-2^31 ~ 2^31-1)</td>\n</tr>\n<tr>\n<td>long(长整形)</td>\n<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>\n<td>(-2^31 ~ 2^31-1)</td>\n</tr>\n<tr>\n<td>long long(长长整形)</td>\n<td>8字节</td>\n<td>(-2^63 ~ 2^63-1)</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-1-2-实型\"><a href=\"#1-1-2-实型\" class=\"headerlink\" title=\"1.1.2 实型\"></a>1.1.2 实型</h3><p>实行也有几种不同的表示方式，区别也是占用的内存空间不同</p>\n<table>\n<thead>\n<tr>\n<th>数据类</th>\n<th>占用空间</th>\n<th align=\"left\">取值范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>float</td>\n<td>四字节</td>\n<td align=\"left\">七位有效数字</td>\n</tr>\n<tr>\n<td>double</td>\n<td>八字节</td>\n<td align=\"left\">十五到十六位有效数字</td>\n</tr>\n<tr>\n<td>long double</td>\n<td></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h2 id=\"2运算符\"><a href=\"#2运算符\" class=\"headerlink\" title=\"2运算符\"></a>2运算符</h2><h3 id=\"2-1算术运算符\"><a href=\"#2-1算术运算符\" class=\"headerlink\" title=\"2.1算术运算符\"></a>2.1算术运算符</h3><p>处理基本运算</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"2-1-比较运算符\"><a href=\"#2-1-比较运算符\" class=\"headerlink\" title=\"2.1 比较运算符\"></a>2.1 比较运算符</h3><table>\n<thead>\n<tr>\n<th>运算符号</th>\n<th>意义</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>!&#x3D;</td>\n<td>不等于</td>\n<td></td>\n</tr>\n<tr>\n<td>&gt;&#x3D;</td>\n<td>大于等于</td>\n<td></td>\n</tr>\n<tr>\n<td>&lt;&#x3D;</td>\n<td>小于等于</td>\n<td></td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>斯奥与</td>\n<td></td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n<td></td>\n</tr>\n<tr>\n<td>&#x3D;&#x3D;</td>\n<td>等于</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>判断标准不限于整形与实型</p>\n<h2 id=\"3程序执行结构\"><a href=\"#3程序执行结构\" class=\"headerlink\" title=\"3程序执行结构\"></a>3程序执行结构<img src=\"/../../../Desktop/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E5%A4%B9%20(2)/assets/clip_image002-1541662552695.png\" alt=\"clip_image002-1541662552695\"></h2><p>依据条件是否满足，重复执行某段代码</p>\n<p>示例代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span>;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> sorce;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;请输入您的分数： &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\tcin &gt;&gt; sorce;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t <span class=\"keyword\">if</span> (<span class=\"number\">500</span> &lt; sorce)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;恭喜您考上了一本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (sorce &gt; <span class=\"number\">700</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;恭喜您考上了清华北大&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"number\">650</span> &lt; sorce &amp;&amp;sorce&lt; <span class=\"number\">700</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;恭喜您考上了南京大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sorce&lt;=<span class=\"number\">650</span>&amp;&amp;sorce &gt;<span class=\"number\">600</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;恭喜您考上了中南大学！！！&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcout &lt;&lt; <span class=\"string\">&quot;恭喜您考上了一本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"number\">400</span> &lt; sorce &amp;&amp;sorce&lt;= <span class=\"number\">500</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;很遗憾您没有考上一本大学，但您考上了三本大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;未考上本科大学&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数重载\"><a href=\"#函数重载\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h2><p>编译器对于同名函数选择是根据参数的数据类型；</p>\n<p><strong>注意</strong>：</p>\n<ul>\n<li>对于引用编译器是做与本身的数据类型保持一致保持一致；</li>\n<li>不区分const变量与非const变量。</li>\n</ul>\n<h2 id=\"const赋值问题\"><a href=\"#const赋值问题\" class=\"headerlink\" title=\"const赋值问题\"></a>const赋值问题</h2><ul>\n<li>非指针类型</li>\n</ul>\n<p>const会使变量名所指向的内存中存储的值不能发生改变，即使是赋值同样的值；</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> a=<span class=\"number\">3</span>;</span><br><span class=\"line\">a = <span class=\"number\">3</span>;<span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>指针类型</li>\n</ul>\n<p>非const int *可以赋值给非const int *，而非const int * 不可以赋值给const int *</p>\n<p>原因：</p>\n<ol>\n<li>const int * 表示，指向常量int 类型的指针，即指向的这块内存的内容，不可以修改。（但指针本身可以修改）。<br>int * 表示，指向非常量int类型的指针，指针这块内存的内容可修改，指针本身可修改。</li>\n<li>const int* 已经限制此地址内容，不可修改。</li>\n<li>这时，却让 int * 指针指向这块地址，而使用 int * 指针，表示此地址内容可修改。那么到底可不可以改？<br>接上，因此逻辑冲突，编译器报错。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span>* c_PtrA  =  <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"type\">int</span> * ptrB= <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">c_PtrA = ptrB; <span class=\"comment\">// 没问题</span></span><br><span class=\"line\">ptrB = c_PtrA; <span class=\"comment\">// 编译报错 不能从 const int* 转换程 int*</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面这种情况不会报错，但可能造成程序崩溃</span></span><br><span class=\"line\">ptrB = (<span class=\"type\">int</span>*)c_PtrA;</span><br><span class=\"line\"><span class=\"comment\">// ....</span></span><br><span class=\"line\">*ptrB = <span class=\"number\">20</span>; <span class=\"comment\">// 此处修改了b和a共同指向的地址的内容，程序崩溃</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数模版\"><a href=\"#函数模版\" class=\"headerlink\" title=\"函数模版\"></a>函数模版</h2><p>函数模版是一种特殊的函数，它模版允许以泛型（而不是某种数据类型）的方式编写程序。</p>\n<p>通例：　ｔｅｍｐｌａｔｅ＜ｃｌａｓｓ／ｔｙｐｅｎａｍｅ　类型名＞</p>\n<p>代码示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">//template 关键字告诉C++编译器 要开始泛型编程了</span><br><span class=\"line\">//T - 参数化数据类型</span><br><span class=\"line\">template &lt;typename T&gt;</span><br><span class=\"line\">T Max(T a, T b) &#123;</span><br><span class=\"line\">\treturn a &gt; b ? a : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tint  n = 1;</span><br><span class=\"line\">\tint\t m = 2;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;max(1, 2) = &quot; &lt;&lt; Max(n, m) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfloat a = 2.0;</span><br><span class=\"line\">\tfloat b = 3.0;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;max(2.0, 3.0) = &quot; &lt;&lt; Max(a, b) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tchar i = &#x27;a&#x27;;</span><br><span class=\"line\">\tchar j = &#x27;b&#x27;;</span><br><span class=\"line\">\tcout &lt;&lt; &quot;max(&#x27;a&#x27;, &#x27;b&#x27;) = &quot; &lt;&lt; Max(i, j) &lt;&lt; endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<ol>\n<li>函数模版可以实现函数重载，其中必须有不同的用于区分具体调用那个函数的的数据类型.</li>\n<li>当某些数据无法处理时，并且有意义时，可以重载运算符。</li>\n</ol>\n<p><strong>显示具体化</strong></p>\n<p>相当于函数模版的的某个具体重载，就是模版要实现某个功能对于某种数据类型不适用，可以用显示具体化创造一个具体的函数，来使其适用。</p>\n<p>具体化模版优先于常规模版。非模版优先于具体化模版。</p>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><p>封装是C++面向对象三大特性之一</p>\n<p>封装的意义：</p>\n<ul>\n<li>将属性和行为作为一个整体，表现生活中的事物</li>\n<li>将属性和行为加以权限控制</li>\n</ul>\n<p><strong>封装意义一：</strong></p>\n<p>​\t在设计类的时候，属性和行为写在一起，表现事物</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//圆周率</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">double</span> PI = <span class=\"number\">3.14</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1、封装的意义</span></span><br><span class=\"line\"><span class=\"comment\">//将属性和行为作为一个整体，用来表现生活中的事物</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//封装一个圆类，求圆的周长</span></span><br><span class=\"line\"><span class=\"comment\">//class代表设计一个类，后面跟着的是类名</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:  <span class=\"comment\">//访问权限  公共的权限</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//属性</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> m_r;<span class=\"comment\">//半径</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//行为</span></span><br><span class=\"line\">\t<span class=\"comment\">//获取到圆的周长</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">calculateZC</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//2 * pi  * r</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//获取圆的周长</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>  <span class=\"number\">2</span> * PI * m_r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//通过圆类，创建圆的对象</span></span><br><span class=\"line\">\t<span class=\"comment\">// c1就是一个具体的圆</span></span><br><span class=\"line\">\tCircle c1;</span><br><span class=\"line\">\tc1.m_r = <span class=\"number\">10</span>; <span class=\"comment\">//给圆对象的半径 进行赋值操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2 * pi * 10 = = 62.8</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;圆的周长为： &quot;</span> &lt;&lt; c1.<span class=\"built_in\">calculateZC</span>() &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>封装意义二：</strong></p>\n<p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p>\n<p>访问权限有三种：</p>\n<ol>\n<li>public        公共权限   <strong>类内可以访问  类外可以访问</strong></li>\n<li>protected 保护权限     <strong>类内可以访问 类外不可以访问</strong></li>\n<li>private      私有权限    <strong>类内可以访问  类外不可以访问</strong></li>\n</ol>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//三种权限</span></span><br><span class=\"line\"><span class=\"comment\">//公共权限  public     类内可以访问  类外可以访问</span></span><br><span class=\"line\"><span class=\"comment\">//保护权限  protected  类内可以访问  类外不可以访问</span></span><br><span class=\"line\"><span class=\"comment\">//私有权限  private    类内可以访问  类外不可以访问</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//姓名  公共权限</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tstring m_Name;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//汽车  保护权限</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span>:</span><br><span class=\"line\">\tstring m_Car;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//银行卡密码  私有权限</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_Password;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_Name = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\">\t\tm_Car = <span class=\"string\">&quot;拖拉机&quot;</span>;</span><br><span class=\"line\">\t\tm_Password = <span class=\"number\">123456</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson p;</span><br><span class=\"line\">\tp.m_Name = <span class=\"string\">&quot;李四&quot;</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//p.m_Car = &quot;奔驰&quot;;  //保护权限类外访问不到</span></span><br><span class=\"line\">\t<span class=\"comment\">//p.m_Password = 123; //私有权限类外访问不到</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"struct和class区别\"><a href=\"#struct和class区别\" class=\"headerlink\" title=\"struct和class区别\"></a>struct和class区别</h3><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p>\n<p>区别：</p>\n<ul>\n<li>struct 默认权限为公共</li>\n<li>class   默认权限为私有</li>\n</ul>\n<p><strong>注意</strong></p>\n<p>struct的成员属性即使在设置为private的情况下也可以通过在类内的函数进行修改与访问。</p>\n<h3 id=\"深拷贝与浅拷贝\"><a href=\"#深拷贝与浅拷贝\" class=\"headerlink\" title=\"深拷贝与浅拷贝\"></a>深拷贝与浅拷贝</h3><p>浅拷贝是数值的简单复制，挡在兑取创建一个变量时，指针会指向这块内存，即保存内存的地址，拷贝时默认进行浅拷贝就会把内存地址赋值给目标类，而堆区数据需要在类使用完以后在西沟函数销毁以节省空间（<strong>delete对赢指针，并赋值空指针</strong>），这样就会调用两次析构函数，就会delete两次同一块内存导致崩溃，这好似就需要深拷贝来解决问题</p>\n<p>深拷贝：再在堆区开辟一块新的内存空间来存放需要拷贝的指针指向的数据，即new 数据类型（ 原类的变量名）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//无参（默认）构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>() &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//有参构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">int</span> age ,<span class=\"type\">int</span> height) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tm_age = age;</span><br><span class=\"line\">\t\tm_height = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(height);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//拷贝构造函数  </span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">const</span> Person&amp; p) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"comment\">//如果不利用深拷贝在堆区创建新内存，会导致浅拷贝带来的重复释放堆区问题</span></span><br><span class=\"line\">\t\tm_age = p.m_age;</span><br><span class=\"line\">\t\tm_height = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(*p.m_height);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//析构函数</span></span><br><span class=\"line\">\t~<span class=\"built_in\">Person</span>() &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m_height != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> m_height;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_age;</span><br><span class=\"line\">\t<span class=\"type\">int</span>* m_height;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">18</span>, <span class=\"number\">180</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(p1)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p1的年龄： &quot;</span> &lt;&lt; p1.m_age &lt;&lt; <span class=\"string\">&quot; 身高： &quot;</span> &lt;&lt; *p1.m_height &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p2的年龄： &quot;</span> &lt;&lt; p2.m_age &lt;&lt; <span class=\"string\">&quot; 身高： &quot;</span> &lt;&lt; *p2.m_height &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：在堆区开辟空间的在拷贝时一定要自己提供拷贝函数，防止崩溃</p>\n<h3 id=\"初始化列表\"><a href=\"#初始化列表\" class=\"headerlink\" title=\"初始化列表\"></a>初始化列表</h3><p>一种构造函数</p>\n<p><code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">////传统方式初始化</span></span><br><span class=\"line\">\t<span class=\"comment\">//Person(int a, int b, int c) &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tm_A = a;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tm_B = b;</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tm_C = c;</span></span><br><span class=\"line\">\t<span class=\"comment\">//&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//初始化列表方式初始化</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> c) :<span class=\"built_in\">m_A</span>(a), <span class=\"built_in\">m_B</span>(b), <span class=\"built_in\">m_C</span>(c) &#123;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">PrintPerson</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;mA:&quot;</span> &lt;&lt; m_A &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;mB:&quot;</span> &lt;&lt; m_B &lt;&lt; endl;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;mC:&quot;</span> &lt;&lt; m_C &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_A;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_B;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_C;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p</span><span class=\"params\">(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span></span>;</span><br><span class=\"line\">\tp.<span class=\"built_in\">PrintPerson</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"类作为类的对象\"><a href=\"#类作为类的对象\" class=\"headerlink\" title=\"类作为类的对象\"></a>类作为类的对象</h3><p>假设有类A与B，A中的成员有B，则需要先声明B，在声明A，西析构时先析构，B再析构。</p>\n<h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</p>\n<p>静态成员分为：</p>\n<ul>\n<li>静态成员变量<ul>\n<li>所有对象共享同一份数据</li>\n<li>在编译阶段分配内存</li>\n<li>类内声明，类外初始化</li>\n</ul>\n</li>\n<li>静态成员函数<ul>\n<li>所有对象共享同一个函数</li>\n<li>静态成员函数只能访问静态成员变量</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> m_A; <span class=\"comment\">//静态成员变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//静态成员变量特点：</span></span><br><span class=\"line\">\t<span class=\"comment\">//1 在编译阶段分配内存</span></span><br><span class=\"line\">\t<span class=\"comment\">//2 类内声明，类外初始化</span></span><br><span class=\"line\">\t<span class=\"comment\">//3 所有对象共享同一份数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> m_B; <span class=\"comment\">//静态成员变量也是有访问权限的</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> Person::m_A = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> Person::m_B = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//静态成员变量两种访问方式</span></span><br><span class=\"line\">\t<span class=\"comment\">//1、通过对象</span></span><br><span class=\"line\">\tPerson p1;</span><br><span class=\"line\">\tp1.m_A = <span class=\"number\">100</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; endl;</span><br><span class=\"line\">\tPerson p2;</span><br><span class=\"line\">\tp2.m_A = <span class=\"number\">200</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; endl; <span class=\"comment\">//共享同一份数据</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p2.m_A = &quot;</span> &lt;&lt; p2.m_A &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//2、通过类名</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;m_A = &quot;</span> &lt;&lt; Person::m_A &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//静态成员函数特点：</span></span><br><span class=\"line\">\t<span class=\"comment\">//1 程序共享一个函数</span></span><br><span class=\"line\">\t<span class=\"comment\">//2 静态成员函数只能访问静态成员变量</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;func调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\tm_A = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//m_B = 100; //错误，不可以访问非静态成员变量</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> m_A; <span class=\"comment\">//静态成员变量</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> m_B; <span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//静态成员函数也是有访问权限的</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;func2调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> Person::m_A = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//静态成员变量两种访问方式</span></span><br><span class=\"line\">\t<span class=\"comment\">//1、通过对象</span></span><br><span class=\"line\">\tPerson p1;</span><br><span class=\"line\">\tp1.<span class=\"built_in\">func</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//2、通过类名</span></span><br><span class=\"line\">\tPerson::<span class=\"built_in\">func</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//Person::func2(); //私有权限访问不到</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：</p>\n<ul>\n<li>静态成员类内声明，类外初始化</li>\n<li>静态成员位于全局区，整个程序共享</li>\n<li>静态成员函数只能访问静态成员变量</li>\n<li>调用：类名+：：+函数名\\变量名</li>\n</ul>\n<h3 id=\"this指针\"><a href=\"#this指针\" class=\"headerlink\" title=\"this指针\"></a>this指针</h3><p>this指针的用途：</p>\n<ul>\n<li>当形参和成员变量同名时，可用this指针来区分</li>\n<li>在类的非静态成员函数中返回对象本身，可使用return *this</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">int</span> age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//1、当形参和成员变量同名时，可用this指针来区分</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person&amp; <span class=\"title\">PersonAddPerson</span><span class=\"params\">(Person p)</span> <span class=\"comment\">//引用是为了返回p2本身</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;age += p.age;</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回对象本身</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;<span class=\"comment\">//return是创建了一个副本，若要传回本身需要引用</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p1.age = &quot;</span> &lt;&lt; p1.age &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\tp2.<span class=\"built_in\">PersonAddPerson</span>(p1).<span class=\"built_in\">PersonAddPerson</span>(p1).<span class=\"built_in\">PersonAddPerson</span>(p1);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"_content":"#  \n\n# git使用\n\n##　１、指令\n\n1. git init   创建本地仓库  如果创建成功后可在文件夹下看到隐藏的.git目录\n\n2. git add 讲文件加入暂存区\n\n3. git commit-m”注释” 将文件加入本地仓库\n\n4. git status 查看的修改的状态（暂存区、工作区）\n\n​    新创建的文件是未跟踪状态\n\n5. git log [option]  查看提交日志\n\n​    options\n\n- all 显示所有分支\n- pretty=oneline 将提交信息显示为一行\n- abbrev-commit 使得输出的commitId更简短\n- graph 以图的形式显示\n\n6. git reset --hard commitID  **ID可以在日志中查看  被删除的日志可以用git reflog**\n7.  .gitignore 的文件（文件名称固定），列出要忽略的文件模式\n\n8. git branch 查看本地分支   ***号代表当前分支**\n\n9. git branch 分支名   创建新的分支    创建的新的分支会建立在当前分支的基础上，会拥有当前分支的全部内容git branch 列出本地已经存在的分支，并且当前分支会用*标记\n   git branch -r 查看远程版本库的分支列表\n   git branch -a 查看所有分支列表（包括本地和远程，remotes/开头的表示远程分支）\n   git branch -v 查看一个分支的最后一次提交\n   git branch --merged  查看哪些分支已经合并到当前分支\n   git branch --no-merged 查看所有未合并工作的分支\n\n10. git checkout 分支名  切换分支   **还可以直接切换到一个不存在的分支（创建并切换）git checkout -b**\n\n11. git merge  合并分支到当前分支\n    注意：分支上的内容必须先提交,才能切换分支\n\n    一个分支上的提交可以合并到另一个分支\n\n    - 命令：git merge 分支名称\n    - 在每个人都开发完后就将所有的代码汇总到一起，此时就要执行分支的合并操作\n\n    master使我们的主线，我们一般将分支合并到主线上面去\n\n    步骤：切换到master分支，然后执行合并命令，执行完后，分支上的资源、文件就会被合并到主线上面去\n\n12. 注意：分支上的内容必须先提交,才能切换分支\n\n    一个分支上的提交可以合并到另一个分支\n\n    - 命令：git merge 分支名称\n    - 在每个人都开发完后就将所有的代码汇总到一起，此时就要执行分支的合并操作\n\n    master使我们的主线，我们一般将分支合并到主线上面去\n\n    步骤：切换到master分支，然后执行合并命令，执行完后，分支上的资源、文件就会被合并到主线上面去\n\n13. git branch -d b1 删除分支时，需要做各种检查\n    git branch -D b1 不做任何检查，强制删除\n    **注意不能删除当前分支**\n\n14. git push [-f] [–set-upstream] [远端名称 [本地分支名][:远端分支名] ]\n\n    - 如果远程分支名和本地分支名称相同，则可以只写本地分支\n\n       本来是：git push origin master ：master 表示将本地仓库的master分支提交到远程仓库的master分支\n\n      - git push origin master 这里表示将本地仓库当前master分支的内容推到远程仓库上面去\n\n    - -f 表示强制覆盖a\n\n    - –set-upstream 推送到远端的同时并且建立起和远端分支的关联关系。\n\n      - git push --set-upstream origin master\n\n    - 如果**当前分支已经和远端分支关联**，则可以省略分支名和远端名","source":"_posts/post-title-with-whitespace.md","raw":"#  \n\n# git使用\n\n##　１、指令\n\n1. git init   创建本地仓库  如果创建成功后可在文件夹下看到隐藏的.git目录\n\n2. git add 讲文件加入暂存区\n\n3. git commit-m”注释” 将文件加入本地仓库\n\n4. git status 查看的修改的状态（暂存区、工作区）\n\n​    新创建的文件是未跟踪状态\n\n5. git log [option]  查看提交日志\n\n​    options\n\n- all 显示所有分支\n- pretty=oneline 将提交信息显示为一行\n- abbrev-commit 使得输出的commitId更简短\n- graph 以图的形式显示\n\n6. git reset --hard commitID  **ID可以在日志中查看  被删除的日志可以用git reflog**\n7.  .gitignore 的文件（文件名称固定），列出要忽略的文件模式\n\n8. git branch 查看本地分支   ***号代表当前分支**\n\n9. git branch 分支名   创建新的分支    创建的新的分支会建立在当前分支的基础上，会拥有当前分支的全部内容git branch 列出本地已经存在的分支，并且当前分支会用*标记\n   git branch -r 查看远程版本库的分支列表\n   git branch -a 查看所有分支列表（包括本地和远程，remotes/开头的表示远程分支）\n   git branch -v 查看一个分支的最后一次提交\n   git branch --merged  查看哪些分支已经合并到当前分支\n   git branch --no-merged 查看所有未合并工作的分支\n\n10. git checkout 分支名  切换分支   **还可以直接切换到一个不存在的分支（创建并切换）git checkout -b**\n\n11. git merge  合并分支到当前分支\n    注意：分支上的内容必须先提交,才能切换分支\n\n    一个分支上的提交可以合并到另一个分支\n\n    - 命令：git merge 分支名称\n    - 在每个人都开发完后就将所有的代码汇总到一起，此时就要执行分支的合并操作\n\n    master使我们的主线，我们一般将分支合并到主线上面去\n\n    步骤：切换到master分支，然后执行合并命令，执行完后，分支上的资源、文件就会被合并到主线上面去\n\n12. 注意：分支上的内容必须先提交,才能切换分支\n\n    一个分支上的提交可以合并到另一个分支\n\n    - 命令：git merge 分支名称\n    - 在每个人都开发完后就将所有的代码汇总到一起，此时就要执行分支的合并操作\n\n    master使我们的主线，我们一般将分支合并到主线上面去\n\n    步骤：切换到master分支，然后执行合并命令，执行完后，分支上的资源、文件就会被合并到主线上面去\n\n13. git branch -d b1 删除分支时，需要做各种检查\n    git branch -D b1 不做任何检查，强制删除\n    **注意不能删除当前分支**\n\n14. git push [-f] [–set-upstream] [远端名称 [本地分支名][:远端分支名] ]\n\n    - 如果远程分支名和本地分支名称相同，则可以只写本地分支\n\n       本来是：git push origin master ：master 表示将本地仓库的master分支提交到远程仓库的master分支\n\n      - git push origin master 这里表示将本地仓库当前master分支的内容推到远程仓库上面去\n\n    - -f 表示强制覆盖a\n\n    - –set-upstream 推送到远端的同时并且建立起和远端分支的关联关系。\n\n      - git push --set-upstream origin master\n\n    - 如果**当前分支已经和远端分支关联**，则可以省略分支名和远端名","slug":"post-title-with-whitespace","published":1,"date":"2024-03-15T13:47:43.934Z","updated":"2024-03-24T14:25:12.200Z","_id":"clttemk340000l4tfc7xdej1q","title":"","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h1 id=\"git使用\"><a href=\"#git使用\" class=\"headerlink\" title=\"git使用\"></a>git使用</h1><h2 id=\"１、指令\"><a href=\"#１、指令\" class=\"headerlink\" title=\"１、指令\"></a>１、指令</h2><ol>\n<li><p>git init   创建本地仓库  如果创建成功后可在文件夹下看到隐藏的.git目录</p>\n</li>\n<li><p>git add 讲文件加入暂存区</p>\n</li>\n<li><p>git commit-m”注释” 将文件加入本地仓库</p>\n</li>\n<li><p>git status 查看的修改的状态（暂存区、工作区）</p>\n</li>\n</ol>\n<p>​    新创建的文件是未跟踪状态</p>\n<ol start=\"5\">\n<li>git log [option]  查看提交日志</li>\n</ol>\n<p>​    options</p>\n<ul>\n<li>all 显示所有分支</li>\n<li>pretty&#x3D;oneline 将提交信息显示为一行</li>\n<li>abbrev-commit 使得输出的commitId更简短</li>\n<li>graph 以图的形式显示</li>\n</ul>\n<ol start=\"6\">\n<li><p>git reset –hard commitID  <strong>ID可以在日志中查看  被删除的日志可以用git reflog</strong></p>\n</li>\n<li><p>.gitignore 的文件（文件名称固定），列出要忽略的文件模式</p>\n</li>\n<li><p>git branch 查看本地分支   *<strong>号代表当前分支</strong></p>\n</li>\n<li><p>git branch 分支名   创建新的分支    创建的新的分支会建立在当前分支的基础上，会拥有当前分支的全部内容git branch 列出本地已经存在的分支，并且当前分支会用*标记<br>git branch -r 查看远程版本库的分支列表<br>git branch -a 查看所有分支列表（包括本地和远程，remotes&#x2F;开头的表示远程分支）<br>git branch -v 查看一个分支的最后一次提交<br>git branch –merged  查看哪些分支已经合并到当前分支<br>git branch –no-merged 查看所有未合并工作的分支</p>\n</li>\n<li><p>git checkout 分支名  切换分支   <strong>还可以直接切换到一个不存在的分支（创建并切换）git checkout -b</strong></p>\n</li>\n<li><p>git merge  合并分支到当前分支<br>注意：分支上的内容必须先提交,才能切换分支</p>\n<p>一个分支上的提交可以合并到另一个分支</p>\n<ul>\n<li>命令：git merge 分支名称</li>\n<li>在每个人都开发完后就将所有的代码汇总到一起，此时就要执行分支的合并操作</li>\n</ul>\n<p>master使我们的主线，我们一般将分支合并到主线上面去</p>\n<p>步骤：切换到master分支，然后执行合并命令，执行完后，分支上的资源、文件就会被合并到主线上面去</p>\n</li>\n<li><p>注意：分支上的内容必须先提交,才能切换分支</p>\n<p>一个分支上的提交可以合并到另一个分支</p>\n<ul>\n<li>命令：git merge 分支名称</li>\n<li>在每个人都开发完后就将所有的代码汇总到一起，此时就要执行分支的合并操作</li>\n</ul>\n<p>master使我们的主线，我们一般将分支合并到主线上面去</p>\n<p>步骤：切换到master分支，然后执行合并命令，执行完后，分支上的资源、文件就会被合并到主线上面去</p>\n</li>\n<li><p>git branch -d b1 删除分支时，需要做各种检查<br>git branch -D b1 不做任何检查，强制删除<br><strong>注意不能删除当前分支</strong></p>\n</li>\n<li><p>git push [-f] [–set-upstream] [远端名称 [本地分支名][:远端分支名] ]</p>\n<ul>\n<li><p>如果远程分支名和本地分支名称相同，则可以只写本地分支</p>\n<p> 本来是：git push origin master ：master 表示将本地仓库的master分支提交到远程仓库的master分支</p>\n<ul>\n<li>git push origin master 这里表示将本地仓库当前master分支的内容推到远程仓库上面去</li>\n</ul>\n</li>\n<li><p>-f 表示强制覆盖a</p>\n</li>\n<li><p>–set-upstream 推送到远端的同时并且建立起和远端分支的关联关系。</p>\n<ul>\n<li>git push –set-upstream origin master</li>\n</ul>\n</li>\n<li><p>如果<strong>当前分支已经和远端分支关联</strong>，则可以省略分支名和远端名</p>\n</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h1 id=\"git使用\"><a href=\"#git使用\" class=\"headerlink\" title=\"git使用\"></a>git使用</h1><h2 id=\"１、指令\"><a href=\"#１、指令\" class=\"headerlink\" title=\"１、指令\"></a>１、指令</h2><ol>\n<li><p>git init   创建本地仓库  如果创建成功后可在文件夹下看到隐藏的.git目录</p>\n</li>\n<li><p>git add 讲文件加入暂存区</p>\n</li>\n<li><p>git commit-m”注释” 将文件加入本地仓库</p>\n</li>\n<li><p>git status 查看的修改的状态（暂存区、工作区）</p>\n</li>\n</ol>\n<p>​    新创建的文件是未跟踪状态</p>\n<ol start=\"5\">\n<li>git log [option]  查看提交日志</li>\n</ol>\n<p>​    options</p>\n<ul>\n<li>all 显示所有分支</li>\n<li>pretty&#x3D;oneline 将提交信息显示为一行</li>\n<li>abbrev-commit 使得输出的commitId更简短</li>\n<li>graph 以图的形式显示</li>\n</ul>\n<ol start=\"6\">\n<li><p>git reset –hard commitID  <strong>ID可以在日志中查看  被删除的日志可以用git reflog</strong></p>\n</li>\n<li><p>.gitignore 的文件（文件名称固定），列出要忽略的文件模式</p>\n</li>\n<li><p>git branch 查看本地分支   *<strong>号代表当前分支</strong></p>\n</li>\n<li><p>git branch 分支名   创建新的分支    创建的新的分支会建立在当前分支的基础上，会拥有当前分支的全部内容git branch 列出本地已经存在的分支，并且当前分支会用*标记<br>git branch -r 查看远程版本库的分支列表<br>git branch -a 查看所有分支列表（包括本地和远程，remotes&#x2F;开头的表示远程分支）<br>git branch -v 查看一个分支的最后一次提交<br>git branch –merged  查看哪些分支已经合并到当前分支<br>git branch –no-merged 查看所有未合并工作的分支</p>\n</li>\n<li><p>git checkout 分支名  切换分支   <strong>还可以直接切换到一个不存在的分支（创建并切换）git checkout -b</strong></p>\n</li>\n<li><p>git merge  合并分支到当前分支<br>注意：分支上的内容必须先提交,才能切换分支</p>\n<p>一个分支上的提交可以合并到另一个分支</p>\n<ul>\n<li>命令：git merge 分支名称</li>\n<li>在每个人都开发完后就将所有的代码汇总到一起，此时就要执行分支的合并操作</li>\n</ul>\n<p>master使我们的主线，我们一般将分支合并到主线上面去</p>\n<p>步骤：切换到master分支，然后执行合并命令，执行完后，分支上的资源、文件就会被合并到主线上面去</p>\n</li>\n<li><p>注意：分支上的内容必须先提交,才能切换分支</p>\n<p>一个分支上的提交可以合并到另一个分支</p>\n<ul>\n<li>命令：git merge 分支名称</li>\n<li>在每个人都开发完后就将所有的代码汇总到一起，此时就要执行分支的合并操作</li>\n</ul>\n<p>master使我们的主线，我们一般将分支合并到主线上面去</p>\n<p>步骤：切换到master分支，然后执行合并命令，执行完后，分支上的资源、文件就会被合并到主线上面去</p>\n</li>\n<li><p>git branch -d b1 删除分支时，需要做各种检查<br>git branch -D b1 不做任何检查，强制删除<br><strong>注意不能删除当前分支</strong></p>\n</li>\n<li><p>git push [-f] [–set-upstream] [远端名称 [本地分支名][:远端分支名] ]</p>\n<ul>\n<li><p>如果远程分支名和本地分支名称相同，则可以只写本地分支</p>\n<p> 本来是：git push origin master ：master 表示将本地仓库的master分支提交到远程仓库的master分支</p>\n<ul>\n<li>git push origin master 这里表示将本地仓库当前master分支的内容推到远程仓库上面去</li>\n</ul>\n</li>\n<li><p>-f 表示强制覆盖a</p>\n</li>\n<li><p>–set-upstream 推送到远端的同时并且建立起和远端分支的关联关系。</p>\n<ul>\n<li>git push –set-upstream origin master</li>\n</ul>\n</li>\n<li><p>如果<strong>当前分支已经和远端分支关联</strong>，则可以省略分支名和远端名</p>\n</li>\n</ul>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}